<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>候鸟衔的信（三行情诗）</title>
      <link href="/2025/09/22/%E4%B8%89%E8%A1%8C%E6%83%85%E8%AF%97/"/>
      <url>/2025/09/22/%E4%B8%89%E8%A1%8C%E6%83%85%E8%AF%97/</url>
      
        <content type="html"><![CDATA[<p>三行情诗是一个很有意思的发明。人们对于情意，总是想诉说很多。然而如果只让你写三行，你会写什么呢？</p><p>（不定时更新）</p>        <h1 id="其一"   >          <a href="#其一" class="heading-link"><i class="fas fa-link"></i></a><a href="#其一" class="headerlink" title="其一"></a>其一</h1>      <p>在我的眸上，<br>雕刻你的脸庞，<br>自此众生皆你模样。</p>        <h1 id="其二"   >          <a href="#其二" class="heading-link"><i class="fas fa-link"></i></a><a href="#其二" class="headerlink" title="其二"></a>其二</h1>      <p>看雪是你，听风是你，<br>你居心上，<br>才在天地。</p>        <h1 id="其三"   >          <a href="#其三" class="heading-link"><i class="fas fa-link"></i></a><a href="#其三" class="headerlink" title="其三"></a>其三</h1>      <p>毕生所逐不过诗与远方<br>而你仅仅在我眼前<br>便是绝世的诗篇</p>        <h1 id="其四"   >          <a href="#其四" class="heading-link"><i class="fas fa-link"></i></a><a href="#其四" class="headerlink" title="其四"></a>其四</h1>      <p>于江海里窥你面容<br>在朝云中与你相拥<br>我落笔写下相逢</p>        <h1 id="其五"   >          <a href="#其五" class="heading-link"><i class="fas fa-link"></i></a><a href="#其五" class="headerlink" title="其五"></a>其五</h1>      <p>邂逅你于清晨<br>失去你于黄昏<br>愿重逢时不是故人</p>        <h1 id="其六"   >          <a href="#其六" class="heading-link"><i class="fas fa-link"></i></a><a href="#其六" class="headerlink" title="其六"></a>其六</h1>      <p>想给你念诗<br>想为你写诗<br>想和你成诗</p>        <h1 id="其七"   >          <a href="#其七" class="heading-link"><i class="fas fa-link"></i></a><a href="#其七" class="headerlink" title="其七"></a>其七</h1>      <p>总是有些自我的想法，</p><p>比如你似乎不属于这世间，</p><p>而如今只是为了和我遇见。</p>]]></content>
      
      
      <categories>
          
          <category> 创作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 情诗 </tag>
            
            <tag> 写作 </tag>
            
            <tag> 现代诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在云上出现的字（读书摘抄）</title>
      <link href="/2025/09/22/%E4%BA%91%E4%B8%8A%E5%87%BA%E7%8E%B0%E7%9A%84%E5%AD%97/"/>
      <url>/2025/09/22/%E4%BA%91%E4%B8%8A%E5%87%BA%E7%8E%B0%E7%9A%84%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p><strong>不定时</strong>更新看到的喜欢的句子，仰头方见，故言云上。也许会附上一些自己的感悟</p><ul><li><p><strong>我与我，周旋久，宁作我。</strong></p><blockquote><p>我仍记得第一次看到这句话，是在世说新语上。</p><p>桓公少与殷侯齐名，常有竞心。桓问殷：“卿何如我？”殷云：“<strong>我与我，周旋久，宁作我！</strong>”</p><p>世俗意义上，恒温以一个胜利者的姿态向殷浩问，此时的你和我相比，怎么样？</p><p>殷只是淡淡说了句，我宁愿做我自己。</p><p>彼时只惊叹于殷的宠辱不惊，气魄非凡。现在对这句话有了更多的感慨。</p><p>你是世上最了解自己的人，你知道如何应对自己的悲伤，你知道你在受伤时的脆弱。你知道如何克制你人性中的恶，如何选择让自己相处舒适的朋友。你知道你的拖延，你的犹豫，你的果决，你知道你的爱意会如何汹涌，知道如何抑制自己的感情。你无数次在内心挣扎，脑海里两种声音在打架。</p><p>我与我，周旋久。</p></blockquote></li><li><p><strong>当你看过人性的复杂，便不会轻言善恶。</strong></p></li><li><p><strong>我和这个世界有过情人般的争吵。</strong></p><blockquote><p>谈一段恋爱之后才能真正理解这段话</p></blockquote></li><li><p><strong>我之所以写徐霞客，是想告诉你，所谓百年功名，千秋霸业，万古流芳，与一件事情相比，其实都算不了什么，这件事情就是——用你喜欢的方式度过一生。</strong></p></li><li><p><strong>问菩萨为何倒座</strong><br><strong>叹众生不肯回头。</strong></p></li><li><p><strong>逢人不说人间事， 便是人间无事人。</strong></p></li><li><p><strong>我只愿你面朝大海，春暖花开。</strong></p></li><li><p><strong>你承诺过的月亮，还是没有出现，而我无眠，或者，我只是衣单天寒的，替你多爱了一夜人间。</strong></p></li><li><p><strong>我有时看山不是山，看太阳不是太阳。我看天空是大海，我看大海是宇宙。我的脑中可以飞出蝴蝶，再开出繁花。我掌管自己的草木枯荣，我包容万物的悲欢离合。</strong></p></li><li><p><strong>为天地立心，为生民立命，为往圣继绝学，为万世开太平。</strong></p><blockquote><p>横渠四句，气概压古今。</p></blockquote></li><li><p><strong>柳下系舟犹未稳，能几日，又中秋。</strong></p></li><li><p><strong>诗万首，酒千觞，几曾着眼看候王。</strong></p></li><li><p><strong>在干净的院子里读你的诗歌。这人间情事恍惚如突然飞过的麻雀儿</strong><br><strong>而光阴皎洁。我不适宜肝肠寸断</strong><br><strong>如果给你寄一本书，我不会寄给你诗歌</strong><br><strong>我要给你一本关于植物，关于庄稼的告诉你稻子和稗子的区别</strong><br><strong>告诉你一棵稗子提心吊胆的春天</strong></p></li><li></li><li><p><strong>此地长眠者 声名水上书</strong></p></li><li></li><li><p><strong>所见诸佛，皆由己心。</strong></p></li><li></li><li><p><strong>松花酿酒，春水煎茶。</strong></p></li><li></li><li><p><strong>不是风动，不是幡动，仁者心动。</strong></p></li><li></li><li><p><strong>行到水穷处，坐看云起时。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 创作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 书籍 </tag>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在河里漂的小纸条（作者写的乱七八糟的文案）</title>
      <link href="/2025/09/22/%E6%96%87%E6%A1%88/"/>
      <url>/2025/09/22/%E6%96%87%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>有些句子，会像某个时间，流水一样流过你的脑海，也许抓得住，也许抓不住。它们没头没尾，有时也显得做作。但是都是思想在流动的证明。朋友，希望你也珍视你脑海中一闪而过的灵感。这也是你的一部分。如果你能在这条河中看到你愿意为之停留的纸条，那么固然是我的幸运。（不定时持续更新）。</p><p>之前作者有一个专门的笔记本记录这些，只可惜也许找不到了。只能在记忆里搜寻。这里同样是从六七年前开始写的句子。</p><ul><li><p><strong>那时的我们太过执着，凡事总要论个对错，求个结果。</strong></p></li><li><p><strong>叹苍天空付，身随流俗，江郎心失非才尽，半身傲才半身苦。</strong></p></li><li><p><strong>希望我没有来生，唯有此时。</strong></p></li><li><p><strong>我第一次看见风，是在你的发间，但我没有看风。</strong></p></li><li><p><strong>回忆把人困在那里，却又给人栖息之地。</strong></p></li><li><p><strong>不为明月，借阳而耀。自非溪流，无羡沧海。</strong></p></li><li><p><strong>觉得许久未见，也非一别经年，应怪太过思念。</strong></p></li><li><p><strong>我们还没有看过江上的日出，月光初照的洞庭。甚至爱意未曾来得及说出口，盛夏的风便把我们吹散，要为这荒诞的青春画上句号。</strong></p></li><li><p><strong>无香早入海棠耳，未见花色敛嫣红。</strong></p></li><li><p><strong>愿清欢长伴，凛冬有暖；愿岁岁平安，流光静看，愿眸光淡然，烟火无干。</strong></p></li><li><p><strong>江南的春风没能吹到塞北，塞北的飞蓬也未能飘至江南，你我没有江南塞北的距离，为何有着江南塞北的结局。</strong></p></li><li><p><strong>属于我的那缕月光，是否轻落你衣裳。</strong></p></li><li><p><strong>如果流年，也懂离伤。</strong></p></li><li><p><strong>不似桃李，何同芳尘，只若江上清风，山间明月，又如霜雪初降，寒溪兀流。自脱胎于冰雪，何沾染于凡尘？</strong></p></li><li><p><strong>我既生而自由，世间何来枷锁。</strong></p></li><li><p><strong>我很想你，一想起你便想喝酒了。只怪清醒时不敢想你，醉了便能少些顾忌。</strong></p></li><li><p><strong>远方的酒，无端唤起故乡的愁，故乡的梦，何故吹着远方的风。</strong></p></li><li><p><strong>掌纹如果预示着命运，我们双手紧握的那一刻，命运也该有不可分割的交集吧</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 创作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 写作 </tag>
            
            <tag> 文案 </tag>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遗落在山间的诗稿（作者写的古体诗）</title>
      <link href="/2025/09/22/%E9%81%97%E8%90%BD%E5%9C%A8%E5%B1%B1%E9%97%B4%E7%9A%84%E8%AF%97%E7%A8%BF/"/>
      <url>/2025/09/22/%E9%81%97%E8%90%BD%E5%9C%A8%E5%B1%B1%E9%97%B4%E7%9A%84%E8%AF%97%E7%A8%BF/</url>
      
        <content type="html"><![CDATA[<p>整理这些诗文的时候，许多已经想不起了。不记得自己写了哪些诗，在各种可能留下痕迹的地方找了又找。在记忆这座深山里行走时，总免不了迷失。这些诗文的时间跨度很大，有五六年前的，也有近日的。有些写的水平一般的，本不愿放上来。但是细想一番，何必否定自己的过去呢？</p>        <h2 id="凤栖梧"   >          <a href="#凤栖梧" class="heading-link"><i class="fas fa-link"></i></a><a href="#凤栖梧" class="headerlink" title="凤栖梧"></a><strong>凤栖梧</strong></h2>      <p>渐寒冬木纷华收，<u>远望梨花，冰枝琉璃透</u>。却道行人多回首，灵清不同桃李柔。<br>流云飞散覆兰舟，仙卿踏雪，衣袂舞冷骤。应有玉人立江洲，梅魂冰骨渐白头。</p><img src="/images/950218a93160439623a2fa78182bd16.jpg" alt="950218a93160439623a2fa78182bd16" style="zoom: 33%;" /><blockquote><p>高中那年见证了人生第一次冻雨，晚自习回家的路上看到这一幕，为之震撼，故记之。</p></blockquote>        <h2 id="自度曲"   >          <a href="#自度曲" class="heading-link"><i class="fas fa-link"></i></a><a href="#自度曲" class="headerlink" title="自度曲"></a>自度曲</h2>      <p>水天一色，原是日已晚，泪眼潸然。北国方归，何道碎琼寒。忽闻故人，一夜风霜尽染。<br>洞庭无波，昔年<u>梧桐残</u>，湘灵瑟断。杨柳难留，但恨流光晚。云结愁凝，却嗔江风难散。</p><img src="/images/bc2b582dc134ee65bf0c09cbaa5238b.jpg" alt="bc2b582dc134ee65bf0c09cbaa5238b" style="zoom: 33%;" /><blockquote><p>图：高中校园前的梧桐树。</p></blockquote><blockquote><p>2025年一月寒假，洞庭湖边，噙着泪为某位故人写下。</p></blockquote>        <h2 id="苏幕遮"   >          <a href="#苏幕遮" class="heading-link"><i class="fas fa-link"></i></a><a href="#苏幕遮" class="headerlink" title="苏幕遮"></a>苏幕遮</h2>      <p>留行迹，许白首，长情最是，朔时风游。云散广寒轻染月，何携旅思？霜满心头。<br>絮北往，愁南休，离乡何苦，莫怨杨柳。此间入眼空素色，不度江南，送梦岳州。</p><img src="/images/534c57b8ee997243a9f47904344cbf2.jpg" alt="534c57b8ee997243a9f47904344cbf2" style="zoom:33%;" /><blockquote><p>为东北漫天风雪震撼，挑战不着雪字写雪。写着写着想家了。</p></blockquote>        <h2 id="随笔"   >          <a href="#随笔" class="heading-link"><i class="fas fa-link"></i></a><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h2>      <p>白日行云抛妄念，<br>昨夜明月又梦君。<br>倾杯非为琼浆醉，<br>暗托心事与酒听。</p>        <h2 id="虞美人"   >          <a href="#虞美人" class="heading-link"><i class="fas fa-link"></i></a><a href="#虞美人" class="headerlink" title="虞美人"></a>虞美人</h2>      <p>何以再寻玉龙芒，消磨还神伤，诗酒已任韶光弃，江楼无月、东篱无酒觞。<br>年少却异少年样，莫道无惆怅。潘鬓未顾先宋悲，饮甚流霞、宁醉中山长。</p>        <h2 id="游洞庭"   >          <a href="#游洞庭" class="heading-link"><i class="fas fa-link"></i></a><a href="#游洞庭" class="headerlink" title="游洞庭"></a>游洞庭</h2>      <p>闲循古人迹，洞庭衍长空。<br>潮起扬风柳，波皱引兰舟。<br>湘灵瑟不绝，仙人三醉楼。<br>太阿乘曦日，凌空直断流。<br>朝圣自此始，神光通瀛洲。<br>洞庭八百里，诗传三千首。<br>万古悲欢叹，一纸竟足留。<br>李杜存迹此，温如曾醉游。<br>屈子伤木叶，范公论乐忧。<br>遥追古人思，亦共先圣愁。</p><img src="/images/8faa2f8364cbfe114f02af6e77f151c.jpg" alt="8faa2f8364cbfe114f02af6e77f151c" style="zoom:33%;" /><blockquote><p>高中拍的，我最爱的洞庭湖的落日</p></blockquote>        <h2 id="随笔-1"   >          <a href="#随笔-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#随笔-1" class="headerlink" title="随笔"></a>随笔</h2>      <p>无风水天同，云霞敛湖中。<br>枯枝远何似，银汉缀晴空。</p>        <h2 id="念奴娇•记巴陵初雪"   >          <a href="#念奴娇•记巴陵初雪" class="heading-link"><i class="fas fa-link"></i></a><a href="#念奴娇•记巴陵初雪" class="headerlink" title="念奴娇•记巴陵初雪"></a>念奴娇•记巴陵初雪</h2>      <p>南国初雪，正潇潇，素色尽目遥遥。皆道江南和春住，最喜碎琼霁晓。红墙青瓦，流云此散，恍然古今淆。愿得年年，看取傲梅凌霜。<br>晨起总赖冬寒，半晌贪欢，凝雨留人踪。沐雪莫携撑花去，白头愿、几能成。梧桐尚红，满地北风，相思终难寄。洞庭雾渺，湘灵瑟几重。</p><blockquote><p>高三那年冬天，破天荒的下了雪</p></blockquote>        <h2 id="除夕作"   >          <a href="#除夕作" class="heading-link"><i class="fas fa-link"></i></a><a href="#除夕作" class="headerlink" title="除夕作"></a>除夕作</h2>      <p>言是年年复，逝水岁又除。<br>此心常如旧，淡看雪有无。</p>        <h2 id="瞎改"   >          <a href="#瞎改" class="heading-link"><i class="fas fa-link"></i></a><a href="#瞎改" class="headerlink" title="瞎改"></a>瞎改</h2>      <p>冬日游，碎琼落满头。雪上谁家娘子，足风流。妾拟将身嫁与，一生休。纵被无情弃，不能羞。</p>        <h2 id="望江南"   >          <a href="#望江南" class="heading-link"><i class="fas fa-link"></i></a><a href="#望江南" class="headerlink" title="望江南"></a>望江南</h2>      <p>少年好，春光莫虚耗。不见长江水浩浩，奔至东海不复回，风流还觅谁。<br>月光映，离人思清影。莫饮离恨对明月，且换美酒舍金银，执樽对月饮。</p>        <h2 id="孤句"   >          <a href="#孤句" class="heading-link"><i class="fas fa-link"></i></a><a href="#孤句" class="headerlink" title="孤句"></a>孤句</h2>      <p>若远金门亦无悔，权当天意尘明珠。</p>        <h2 id="秋夜观洞庭"   >          <a href="#秋夜观洞庭" class="heading-link"><i class="fas fa-link"></i></a><a href="#秋夜观洞庭" class="headerlink" title="秋夜观洞庭"></a>秋夜观洞庭</h2>      <p>看得荷败料水寒，湖畔凭栏山河晚。<br>今夜星月羞藏帐，晚幕空然心微憾。<br>应是湘神貌绰约，竟愧冰轮惭银汉。<br>最怜月华弃江波，星光不顾少妆淡。<br>秋风暗拭镜如水，渔火悄燃夜无声。<br>夜色隐却行人迹，明暗恍惚现船纹。<br>一时淆望天湖边，欲寻界隔却无际。<br>幻思乘舟至湖尽，桂魄星辰可藏其？<br>温如清梦许堪寻，子美孤舟或此遗。<br>惟愿撑蒿泛洞庭，不羡古人登临意。</p>        <h2 id="无题"   >          <a href="#无题" class="heading-link"><i class="fas fa-link"></i></a><a href="#无题" class="headerlink" title="无题"></a>无题</h2>      <p>南国秋已晚，何处春意生。依依若柳姿，灼灼绝芳尘。</p><p>北国夏荷举，何处闲凉存。皎皎云中月，悠悠空林深。</p>]]></content>
      
      
      <categories>
          
          <category> 创作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 写作 </tag>
            
            <tag> 古诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在花丛里躺好的书卷（作者送给朋友的诗）</title>
      <link href="/2025/09/22/%E8%BA%BA%E5%9C%A8%E8%8A%B1%E4%B8%9B%E4%B8%AD%E7%9A%84%E4%B9%A6%E5%8D%B7/"/>
      <url>/2025/09/22/%E8%BA%BA%E5%9C%A8%E8%8A%B1%E4%B8%9B%E4%B8%AD%E7%9A%84%E4%B9%A6%E5%8D%B7/</url>
      
        <content type="html"><![CDATA[        <h2 id="醉花阴"   >          <a href="#醉花阴" class="heading-link"><i class="fas fa-link"></i></a><a href="#醉花阴" class="headerlink" title="醉花阴"></a>醉花阴</h2>      <p>松生崔嵬月华清，林深成双行。狸奴知意，南风岑临，晓光初破云。<br>莫道情意酒中轻，初识知盖倾。纵化东海浪，但持恣意，身如青童君。</p>        <h2 id="卜算子"   >          <a href="#卜算子" class="heading-link"><i class="fas fa-link"></i></a><a href="#卜算子" class="headerlink" title="卜算子"></a>卜算子</h2>      <p>期年白驹间，识君如长夏。黛眉何须张敞画，灼灼自风华。<br>南岳齐浮云，湘灵瑟生花。扶余天寒心何住，故人亦故家。</p>        <h2 id="虞美人"   >          <a href="#虞美人" class="heading-link"><i class="fas fa-link"></i></a><a href="#虞美人" class="headerlink" title="虞美人"></a>虞美人</h2>      <p>菡萏香销朔风寒，碎琼素色染。青山一夜华发，却称天公兴高艺超然。<br>纵是巧工无青睐，缘卿胜佳景，感君桃潭赠物情，愿得皓月清光长顾伊。</p>        <h2 id="赠友-前途似海"   >          <a href="#赠友-前途似海" class="heading-link"><i class="fas fa-link"></i></a><a href="#赠友-前途似海" class="headerlink" title="赠友-前途似海"></a>赠友-前途似海</h2>      <p>前路，山海遥遥，风月正好。<br>途中，却霜雪满山，骤雨拦道。<br>似水流年，还总于俗世奔劳<br>海水无际，泛舟苦苦寻觅。</p><p>来往的人很多，也仅仅是多。<br>日光侵蚀着年少的心，<br>方饮下一瓢酒，便在心中酿作了愁。<br>长风破浪，成了再难挥去的忧。</p>        <h2 id="醉花阴-1"   >          <a href="#醉花阴-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#醉花阴-1" class="headerlink" title="醉花阴"></a>醉花阴</h2>      <p>莫道未逢晓雾遮，共闻湘灵瑟。洞庭浩汤，黄鹄振翅，风渡云梦泽。<br>吹梦扶余肃景澈，初历天寒彻。细数碎琼，难凉热血，振衣瀚海辙。</p>        <h2 id="自度曲"   >          <a href="#自度曲" class="heading-link"><i class="fas fa-link"></i></a><a href="#自度曲" class="headerlink" title="自度曲"></a>自度曲</h2>      <p>瑶台月下，雾失流云。道是云汉明浠水，却将凡尘寻。<br>不染俗华，山花盈盈。待到清啼散晨雾，（）</p><blockquote><p>末句怎么也回忆不起来了，遗憾总是难免的。也许你还会保存下来当年我送你的词吧，也许我可以补全它，但也没意义了，就像我们哪怕重来一次 也没意义了。有些事总会被遗忘的，这次是词，下次是我们哪一段过去。</p></blockquote>        <h2 id="苏幕遮"   >          <a href="#苏幕遮" class="heading-link"><i class="fas fa-link"></i></a><a href="#苏幕遮" class="headerlink" title="苏幕遮"></a>苏幕遮</h2>      <p>梧桐木，起闲愁，相思难晚，山远几重秋，霜寒柳烟雾笼舟，何处归渡，天高雁引忧。</p><p>道千阻，君安否，西风临江，遥恐沈瑶瘦。长望月明云气收，清光愿落，故人所行游。</p>]]></content>
      
      
      <categories>
          
          <category> 创作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 写作 </tag>
            
            <tag> 文案 </tag>
            
            <tag> 文学 </tag>
            
            <tag> 诗词 </tag>
            
            <tag> 友情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫理论入门</title>
      <link href="/2025/09/19/%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5/"/>
      <url>/2025/09/19/%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[        <h3 id="1-如果你不伪装，你会被服务器嘲讽"   >          <a href="#1-如果你不伪装，你会被服务器嘲讽" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-如果你不伪装，你会被服务器嘲讽" class="headerlink" title="1.如果你不伪装，你会被服务器嘲讽"></a>1.如果你不伪装，你会被服务器嘲讽</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response=requests.get(<span class="string">&quot;https://movie.douban.com/top250&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></div></figure><p>如果你想这样简单的实现爬虫，服务器会告诉你</p><p><strong>&lt;Response [418]&gt;</strong></p><p>状态码 418 实际上是一个愚人节玩笑。它在 RFC 2324 中定义，该 RFC 是一个关于超文本咖啡壶控制协议（HTCPCP）的笑话文件。在这个笑话中，418 状态码是作为一个玩笑加入到 HTTP 协议中的。</p><p><strong>翻译成人话是“你是傻子吗？”</strong></p>        <h3 id="2-如何不被嘲讽"   >          <a href="#2-如何不被嘲讽" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-如何不被嘲讽" class="headerlink" title="2.如何不被嘲讽"></a>2.如何不被嘲讽</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 Edg/140.0.0.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">response=requests.get(<span class="string">&quot;https://movie.douban.com/top250&quot;</span>,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></div></figure><p>那就是headers伪装成正常客户端的访问。得到方法非常简单，f12无需多言</p><p>此时就会显示</p><p>&lt;Response [200]&gt;</p><p>代表你成功了。</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(response.text)</span><br></pre></td></tr></table></div></figure><p>这样你就可以得到页面源码了</p>        <h3 id="3-关于request库（一切的基础）"   >          <a href="#3-关于request库（一切的基础）" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-关于request库（一切的基础）" class="headerlink" title="3.关于request库（一切的基础）"></a>3.关于request库（一切的基础）</h3>      <p>上面的代码只是冰山一角，如果要真的全面学习，还是要把基础打牢。</p><p>这是一个常用的HTTP请求库，可以方便的向网站发送请求，也是爬虫技术的基石。</p><p>每次调用request请求之后，会返回一个response对象，该对象包含了具体的响应信息。</p><p>以下列举了部分常用响应信息的属性方法使用。</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import request</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;你要发送请求的网址&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#发送请求</span></span><br><span class="line">x=request.get(url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.text)<span class="comment">#返回网页内容</span></span><br><span class="line"><span class="built_in">print</span>(x.status_code)<span class="comment">#返回http状态码</span></span><br><span class="line"><span class="built_in">print</span>(x.reason)<span class="comment">#响应状态的描述，比如ok</span></span><br><span class="line"><span class="built_in">print</span>(x.apparent_encoding)<span class="comment">#返回编码 比如 utf-8</span></span><br><span class="line"><span class="built_in">print</span>(x.json)<span class="comment">#返回json数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;name&#x27;: &#x27;网站&#x27;, &#x27;num&#x27;: 3, &#x27;sites&#x27;: [&#123;&#x27;name&#x27;: &#x27;Google&#x27;, &#x27;info&#x27;: [&#x27;Android&#x27;, &#x27;Google 搜索&#x27;, &#x27;Google 翻译&#x27;]&#125;, &#123;&#x27;name&#x27;: &#x27;Runoob&#x27;, &#x27;info&#x27;: [&#x27;菜鸟教程&#x27;, &#x27;菜鸟工具&#x27;, &#x27;菜鸟微信&#x27;]&#125;, &#123;&#x27;name&#x27;: &#x27;Taobao&#x27;, &#x27;info&#x27;: [&#x27;淘宝&#x27;, &#x27;网购&#x27;]&#125;]&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(x.cookies)<span class="comment">#返回CookieJar对象，包含从服务器发送的cookie</span></span><br><span class="line"><span class="built_in">print</span>(x.headers)<span class="comment">#返回响应头</span></span><br></pre></td></tr></table></div></figure><p>以下是request方法</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>delete(url,args)</td><td>发送delete请求到指定url</td></tr><tr><td>get(url,params,args)</td><td>发送GET请求到指定url</td></tr><tr><td>head(url,args)</td><td>发送HEAD请求到指定url</td></tr><tr><td>patch(url,data,args)</td><td>发送PATCH请求到指定url</td></tr><tr><td>post(url,data,json,args)</td><td>发送POST请求到指定url</td></tr><tr><td>put(url,data,args)</td><td>发送PUT请求到指定url</td></tr><tr><td>request(<em>method</em>, <em>url</em>, <em>args</em>)</td><td>向指定的 url 发送指定的请求方法</td></tr></tbody></table></div><p><strong>get和request</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import requests</span></span><br><span class="line"></span><br><span class="line">kw=&#123;<span class="string">&#x27;s&#x27;</span>:<span class="string">&#x27;python教程&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置请求头</span></span><br><span class="line">headers=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#params接受一个字典或字符串的查询参数，字典类型自动转化为url编码</span></span><br><span class="line">response=requests.get(<span class="string">&quot;url&quot;</span>,params=kw,headers=headers)</span><br><span class="line"><span class="comment">#request的使用</span></span><br><span class="line">x=requests.request(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;url&#x27;</span>)</span><br></pre></td></tr></table></div></figure><p><strong>post</strong></p><p>post() 方法可以发送 POST 请求到指定 url，一般格式如下：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.post(url, data=&#123;key: value&#125;, json=&#123;key: value&#125;, args)</span><br></pre></td></tr></table></div></figure><ul><li><strong>url</strong> 请求 url。</li><li><strong>data</strong> 参数为要发送到指定 url 的字典、元组列表、字节或文件对象。</li><li><strong>json</strong> 参数为要发送到指定 url 的 JSON 对象。</li><li><strong>args</strong> 为其他参数，比如 cookies、headers、verify等</li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 requests 包</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表单参数，参数名为 fname 和 lname</span></span><br><span class="line">myobj = &#123;<span class="string">&#x27;fname&#x27;</span>: <span class="string">&#x27;RUNOOB&#x27;</span>,<span class="string">&#x27;lname&#x27;</span>: <span class="string">&#x27;Boy&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">x = requests.post(<span class="string">&#x27;https://www.runoob.com/try/ajax/demo_post2.php&#x27;</span>, data = myobj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回网页内容</span></span><br><span class="line"><span class="built_in">print</span>(x.text)</span><br></pre></td></tr></table></div></figure><p><strong>附加请求参数</strong></p><p>发送请求我们可以在请求中附加额外的参数，例如请求头、查询参数、请求体等，例如：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0&#x27;&#125;  # 设置请求头</span><br><span class="line">params = &#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;&#125;  # 设置查询参数,params用于在URL后面添加查询字符串(query string)，通常用于GET请求</span><br><span class="line">data = &#123;&#x27;username&#x27;: &#x27;example&#x27;, &#x27;password&#x27;: &#x27;123456&#x27;&#125;  # 设置请求体,data用于发送表单数据，通常用于POST请求。</span><br><span class="line">response = requests.post(&#x27;https://www.runoob.com&#x27;, headers=headers, params=params, data=data)</span><br></pre></td></tr></table></div></figure><p>params和data的示例调用</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取天气信息</span></span><br><span class="line">base_url = <span class="string">&#x27;https://api.weather.com/v3&#x27;</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;beijing&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;apikey&#x27;</span>: <span class="string">&#x27;your_api_key&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;units&#x27;</span>: <span class="string">&#x27;metric&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;fields&#x27;</span>: <span class="string">&#x27;temperature,humidity,windSpeed&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">f&quot;<span class="subst">&#123;base_url&#125;</span>/weather/now&quot;</span>, params=params, json=data)</span><br><span class="line">weather_data = response.json()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;当前温度: <span class="subst">&#123;weather_data[<span class="string">&#x27;temperature&#x27;</span>]&#125;</span>℃&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h3 id="4-如何解析得到的信息？BeautifulSoup库"   >          <a href="#4-如何解析得到的信息？BeautifulSoup库" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-如何解析得到的信息？BeautifulSoup库" class="headerlink" title="4.如何解析得到的信息？BeautifulSoup库"></a>4.如何解析得到的信息？BeautifulSoup库</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></div></figure><p>导入这个库之后，就可以开始使用了。</p><p>下面的一段HTML代码将作为例子被多次用到.这是 <em>爱丽丝梦游仙境的</em> 的一段内容(以后内容中简称为 <em>爱丽丝</em> 的文档):</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">html_doc = &quot;&quot;&quot;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>The Dormouse&#x27;s story<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>The Dormouse&#x27;s story<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;story&quot;</span>&gt;</span>Once upon a time there were three little sisters; and their names were</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com/elsie&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sister&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link1&quot;</span>&gt;</span>Elsie<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com/lacie&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sister&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link2&quot;</span>&gt;</span>Lacie<span class="tag">&lt;/<span class="name">a</span>&gt;</span> and</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com/tillie&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sister&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link3&quot;</span>&gt;</span>Tillie<span class="tag">&lt;/<span class="name">a</span>&gt;</span>;</span><br><span class="line">and they lived at the bottom of a well.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;story&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></div></figure><p>使用BeautifulSoup解析这段代码,能够得到一个 <code>BeautifulSoup</code> 的对象,并能按照标准的缩进格式的结构输出:</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())</span><br><span class="line"><span class="comment"># &lt;html&gt;</span></span><br><span class="line"><span class="comment">#  &lt;head&gt;</span></span><br><span class="line"><span class="comment">#   &lt;title&gt;</span></span><br><span class="line"><span class="comment">#    The Dormouse&#x27;s story</span></span><br><span class="line"><span class="comment">#   &lt;/title&gt;</span></span><br><span class="line"><span class="comment">#  &lt;/head&gt;</span></span><br><span class="line"><span class="comment">#  &lt;body&gt;</span></span><br><span class="line"><span class="comment">#   &lt;p class=&quot;title&quot;&gt;</span></span><br><span class="line"><span class="comment">#    &lt;b&gt;</span></span><br><span class="line"><span class="comment">#     The Dormouse&#x27;s story</span></span><br><span class="line"><span class="comment">#    &lt;/b&gt;</span></span><br><span class="line"><span class="comment">#   &lt;/p&gt;</span></span><br><span class="line"><span class="comment">#   &lt;p class=&quot;story&quot;&gt;</span></span><br><span class="line"><span class="comment">#    Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="comment">#    &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;</span></span><br><span class="line"><span class="comment">#     Elsie</span></span><br><span class="line"><span class="comment">#    &lt;/a&gt;</span></span><br><span class="line"><span class="comment">#    ,</span></span><br><span class="line"><span class="comment">#    &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;</span></span><br><span class="line"><span class="comment">#     Lacie</span></span><br><span class="line"><span class="comment">#    &lt;/a&gt;</span></span><br><span class="line"><span class="comment">#    and</span></span><br><span class="line"><span class="comment">#    &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link2&quot;&gt;</span></span><br><span class="line"><span class="comment">#     Tillie</span></span><br><span class="line"><span class="comment">#    &lt;/a&gt;</span></span><br><span class="line"><span class="comment">#    ; and they lived at the bottom of a well.</span></span><br><span class="line"><span class="comment">#   &lt;/p&gt;</span></span><br><span class="line"><span class="comment">#   &lt;p class=&quot;story&quot;&gt;</span></span><br><span class="line"><span class="comment">#    ...</span></span><br><span class="line"><span class="comment">#   &lt;/p&gt;</span></span><br><span class="line"><span class="comment">#  &lt;/body&gt;</span></span><br><span class="line"><span class="comment"># &lt;/html&gt;</span></span><br></pre></td></tr></table></div></figure><p>几个简单的浏览结构化数据的方法:</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">soup.title</span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;</span></span><br><span class="line"></span><br><span class="line">soup.title.name</span><br><span class="line"><span class="comment"># u&#x27;title&#x27;</span></span><br><span class="line"></span><br><span class="line">soup.title.string</span><br><span class="line"><span class="comment"># u&#x27;The Dormouse&#x27;s story&#x27;</span></span><br><span class="line"></span><br><span class="line">soup.title.parent.name</span><br><span class="line"><span class="comment"># u&#x27;head&#x27;</span></span><br><span class="line"></span><br><span class="line">soup.p</span><br><span class="line"><span class="comment"># &lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line">soup.p[<span class="string">&#x27;class&#x27;</span>]</span><br><span class="line"><span class="comment"># u&#x27;title&#x27;</span></span><br><span class="line"></span><br><span class="line">soup.a</span><br><span class="line"><span class="comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line">soup.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">soup.find(<span class="built_in">id</span>=<span class="string">&quot;link3&quot;</span>)</span><br><span class="line"><span class="comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span></span><br></pre></td></tr></table></div></figure><p>从文档中找到所有<a>标签的链接:</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(link.get(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line">    <span class="comment"># http://example.com/elsie</span></span><br><span class="line">    <span class="comment"># http://example.com/lacie</span></span><br><span class="line">    <span class="comment"># http://example.com/tillie</span></span><br></pre></td></tr></table></div></figure><p>从文档中获取所有文字内容:</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.get_text())</span><br><span class="line"><span class="comment"># The Dormouse&#x27;s story</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Dormouse&#x27;s story</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="comment"># Elsie,</span></span><br><span class="line"><span class="comment"># Lacie and</span></span><br><span class="line"><span class="comment"># Tillie;</span></span><br><span class="line"><span class="comment"># and they lived at the bottom of a well.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></div></figure>        <h3 id="5-尝试汇总我们学到的知识"   >          <a href="#5-尝试汇总我们学到的知识" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-尝试汇总我们学到的知识" class="headerlink" title="5.尝试汇总我们学到的知识"></a>5.尝试汇总我们学到的知识</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如何获取网页标题</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;x&#x27;</span></span><br><span class="line">response=requests.get(url)</span><br><span class="line"><span class="comment">#解决中文乱码问题</span></span><br><span class="line">response.encoding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="comment">#确保请求成功</span></span><br><span class="line"><span class="keyword">if</span> response.status_code==<span class="number">200</span>:</span><br><span class="line">    soup=BeautifulSoup(response.text,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">     <span class="comment">#查找&lt;title&gt;标签</span></span><br><span class="line">     title_tag=soup.find(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">     <span class="comment"># 打印标题文本</span></span><br><span class="line">    <span class="keyword">if</span> title_tag:</span><br><span class="line">        <span class="built_in">print</span>(title_tag.get_text())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未找到&lt;title&gt;标签&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请求失败，状态码：&quot;</span>, response.status_code)</span><br></pre></td></tr></table></div></figure><p>find和find_all方法的使用</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定你想要获取标题的网站</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span> <span class="comment"># 抓取bing搜索引擎的网页内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送HTTP请求获取网页内容</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"><span class="comment"># 中文乱码问题</span></span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找第一个 &lt;a&gt; 标签</span></span><br><span class="line">first_link = soup.find(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(first_link)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一个 &lt;a&gt; 标签的 href 属性</span></span><br><span class="line">first_link_url = first_link.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(first_link_url)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有 &lt;a&gt; 标签</span></span><br><span class="line">all_links = soup.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(all_links)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找具有 id=&quot;unique-id&quot; 的 &lt;input&gt; 标签</span></span><br><span class="line">unique_input = soup.find(<span class="string">&#x27;input&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;su&#x27;</span>)</span><br><span class="line"></span><br><span class="line">input_value = unique_input[<span class="string">&#x27;value&#x27;</span>] <span class="comment"># 获取 input 输入框的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(input_value)</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类和对象</title>
      <link href="/2025/09/13/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
      <url>/2025/09/13/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[        <h2 id="一、继承的基本概念"   >          <a href="#一、继承的基本概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、继承的基本概念" class="headerlink" title="一、继承的基本概念"></a>一、继承的基本概念</h2>      <p>继承是面向对象编程的三大特性之一（封装、继承、多态），它允许我们定义一个类（子类）来继承另一个类（父类）的属性和方法。</p>        <h3 id="1-基本语法"   >          <a href="#1-基本语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;父类/基类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parent_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是父类方法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span>(<span class="title class_ inherited__">ParentClass</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;子类/派生类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">child_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是子类方法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">child = ChildClass()</span><br><span class="line">child.parent_method()  <span class="comment"># 调用继承的方法</span></span><br><span class="line">child.child_method()   <span class="comment"># 调用子类自己的方法</span></span><br></pre></td></tr></table></div></figure>        <h3 id="2-继承的特性"   >          <a href="#2-继承的特性" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-继承的特性" class="headerlink" title="2. 继承的特性"></a>2. 继承的特性</h3>      <ul><li>子类继承父类的所有<strong>公有属性和方法</strong></li><li>子类可以<strong>扩展</strong>父类的功能</li><li>子类可以<strong>重写</strong>父类的方法</li><li>子类的实例也是父类的实例（<code>isinstance</code> 返回 <code>True</code>）</li></ul>        <h2 id="二、方法重写（Override）"   >          <a href="#二、方法重写（Override）" class="heading-link"><i class="fas fa-link"></i></a><a href="#二、方法重写（Override）" class="headerlink" title="二、方法重写（Override）"></a>二、方法重写（Override）</h2>      <p>子类可以重新定义父类的方法，这称为方法重写。</p>        <h3 id="1-完全重写"   >          <a href="#1-完全重写" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-完全重写" class="headerlink" title="1. 完全重写"></a>1. 完全重写</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;动物发出声音&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):  <span class="comment"># 完全重写父类方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;汪汪汪！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">dog = Dog()</span><br><span class="line">dog.speak()  <span class="comment"># 输出: 汪汪汪！</span></span><br></pre></td></tr></table></div></figure>        <h3 id="2-扩展父类方法（使用-super-）"   >          <a href="#2-扩展父类方法（使用-super-）" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-扩展父类方法（使用-super-）" class="headerlink" title="2. 扩展父类方法（使用 super()）"></a>2. 扩展父类方法（使用 super()）</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, color</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)  <span class="comment"># 调用父类的初始化方法</span></span><br><span class="line">        <span class="variable language_">self</span>.color = color      <span class="comment"># 添加新的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">cat = Cat(<span class="string">&quot;咪咪&quot;</span>, <span class="string">&quot;白色&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;名字: <span class="subst">&#123;cat.name&#125;</span>, 颜色: <span class="subst">&#123;cat.color&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h2 id="三、多重继承"   >          <a href="#三、多重继承" class="heading-link"><i class="fas fa-link"></i></a><a href="#三、多重继承" class="headerlink" title="三、多重继承"></a>三、多重继承</h2>      <p>Python 支持多重继承，即一个类可以继承多个父类。</p>        <h3 id="1-基本语法-1"   >          <a href="#1-基本语法-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-基本语法-1" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">father_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;父亲的方法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mother</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mother_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;母亲的方法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(Father, Mother):  <span class="comment"># 继承多个父类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">child_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;孩子的方法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">child = Child()</span><br><span class="line">child.father_method()  <span class="comment"># 调用Father的方法</span></span><br><span class="line">child.mother_method()  <span class="comment"># 调用Mother的方法</span></span><br><span class="line">child.child_method()   <span class="comment"># 调用自己的方法</span></span><br></pre></td></tr></table></div></figure>        <h3 id="2-方法解析顺序（MRO）"   >          <a href="#2-方法解析顺序（MRO）" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-方法解析顺序（MRO）" class="headerlink" title="2. 方法解析顺序（MRO）"></a>2. 方法解析顺序（MRO）</h3>      <p>当多个父类有同名方法时，Python 使用 C3 算法确定调用顺序，可以通过 <code>类名.__mro__</code> 查看。</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A的方法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;B的方法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;C的方法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(B, C):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(D.__mro__)  <span class="comment"># 查看方法解析顺序</span></span><br><span class="line"><span class="comment"># 输出: (&lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.method()  <span class="comment"># 输出: B的方法</span></span><br></pre></td></tr></table></div></figure>        <h3 id="3-菱形继承问题"   >          <a href="#3-菱形继承问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-菱形继承问题" class="headerlink" title="3. 菱形继承问题"></a>3. 菱形继承问题</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A的方法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;B的方法&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().method()  <span class="comment"># 调用下一个类的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;C的方法&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().method()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(B, C):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;D的方法&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().method()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法调用顺序: D -&gt; B -&gt; C -&gt; A</span></span><br><span class="line">d = D()</span><br><span class="line">d.method()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">D的方法</span></span><br><span class="line"><span class="string">B的方法</span></span><br><span class="line"><span class="string">C的方法</span></span><br><span class="line"><span class="string">A的方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="四、特殊方法与继承"   >          <a href="#四、特殊方法与继承" class="heading-link"><i class="fas fa-link"></i></a><a href="#四、特殊方法与继承" class="headerlink" title="四、特殊方法与继承"></a>四、特殊方法与继承</h2>              <h3 id="1-init-方法的继承"   >          <a href="#1-init-方法的继承" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-init-方法的继承" class="headerlink" title="1. __init__ 方法的继承"></a>1. <code>__init__</code> 方法的继承</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, student_id</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)  <span class="comment"># 调用父类的__init__</span></span><br><span class="line">        <span class="variable language_">self</span>.student_id = student_id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">student = Student(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;2023001&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(student.name, student.student_id)</span><br></pre></td></tr></table></div></figure>        <h3 id="2-其他特殊方法的重写"   >          <a href="#2-其他特殊方法的重写" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-其他特殊方法的重写" class="headerlink" title="2. 其他特殊方法的重写"></a>2. 其他特殊方法的重写</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>(<span class="title class_ inherited__">list</span>):  <span class="comment"># 继承内置list类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 重写__str__方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;MyList: <span class="subst">&#123;<span class="built_in">super</span>().__str__()&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">lst = MyList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># 输出: MyList: [1, 2, 3]</span></span><br></pre></td></tr></table></div></figure>        <h2 id="五、抽象基类与接口"   >          <a href="#五、抽象基类与接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#五、抽象基类与接口" class="headerlink" title="五、抽象基类与接口"></a>五、抽象基类与接口</h2>      <p>Python 通过 <code>abc</code> 模块支持抽象基类。</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span>(<span class="title class_ inherited__">ABC</span>):  <span class="comment"># 抽象基类</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius</span>):</span><br><span class="line">        <span class="variable language_">self</span>.radius = radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):  <span class="comment"># 必须实现抽象方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * <span class="variable language_">self</span>.radius ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14</span> * <span class="variable language_">self</span>.radius</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">circle = Circle(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(circle.area())  <span class="comment"># 输出: 78.5</span></span><br></pre></td></tr></table></div></figure>        <h2 id="六、继承的最佳实践"   >          <a href="#六、继承的最佳实践" class="heading-link"><i class="fas fa-link"></i></a><a href="#六、继承的最佳实践" class="headerlink" title="六、继承的最佳实践"></a>六、继承的最佳实践</h2>      <ol><li><strong>优先使用组合而非继承</strong>：除非确实是”is-a”关系</li><li><strong>避免深度继承</strong>：继承层次不宜过深</li><li><strong>合理使用多重继承</strong>：谨慎设计，避免复杂关系</li><li><strong>使用抽象基类定义接口</strong>：明确子类需要实现的方法</li><li><strong>遵循LSP原则</strong>：子类应该能够替换父类</li></ol>        <h2 id="七、完整示例"   >          <a href="#七、完整示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#七、完整示例" class="headerlink" title="七、完整示例"></a>七、完整示例</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多重继承综合示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>正在吃东西&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Flyable</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fly</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>正在飞翔&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Swimable</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swim</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>正在游泳&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span>(Animal, Flyable):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>在唱歌&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Duck</span>(Bird, Swimable):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):  <span class="comment"># 重写父类方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>在嘎嘎叫&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">duck = Duck(<span class="string">&quot;唐老鸭&quot;</span>)</span><br><span class="line">duck.eat()    <span class="comment"># 继承自Animal</span></span><br><span class="line">duck.fly()    <span class="comment"># 继承自Flyable</span></span><br><span class="line">duck.swim()   <span class="comment"># 继承自Swimable</span></span><br><span class="line">duck.speak()  <span class="comment"># 调用重写后的方法</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数 &amp;&amp; 文件存储 &amp;&amp; 异常</title>
      <link href="/2025/09/10/%E5%87%BD%E6%95%B0/"/>
      <url>/2025/09/10/%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[        <h3 id="1-如何给函数写注释"   >          <a href="#1-如何给函数写注释" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-如何给函数写注释" class="headerlink" title="1.如何给函数写注释"></a>1.如何给函数写注释</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">name</span>):</span><br><span class="line"><span class="string">&#x27;函数文档在函数定义的最开头部分，用不记名字符串表示&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;aa&#x27;</span>)</span><br></pre></td></tr></table></div></figure>        <h3 id="2-关键字参数"   >          <a href="#2-关键字参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-关键字参数" class="headerlink" title="2.关键字参数"></a>2.关键字参数</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">name,words</span>):</span><br><span class="line"><span class="built_in">print</span>(name + <span class="string">&#x27;-&gt;&#x27;</span>+words)</span><br><span class="line">a(words=<span class="string">&#x27;11&#x27;</span>，name=<span class="string">&#x27;22&#x27;</span>)</span><br><span class="line"><span class="comment">#输出结果2211</span></span><br></pre></td></tr></table></div></figure><p>使用关键字参数，可以有效避免因不小心搞乱参数的顺序导致的BUG出现</p>        <h3 id="3-python的return语句可以返回多个不同类型的值吗？"   >          <a href="#3-python的return语句可以返回多个不同类型的值吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-python的return语句可以返回多个不同类型的值吗？" class="headerlink" title="3.python的return语句可以返回多个不同类型的值吗？"></a>3.python的return语句可以返回多个不同类型的值吗？</h3>      <p>可以，默认用逗号隔开，以元组的方式返回，也可以用列表的方式返回</p><blockquote><blockquote><blockquote><p>def myFun():<br>return ‘你’, 520, 3.14, True</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>myFun()<br>(‘你’, 520, 3.14, True)<br>def myFun2():<br>return [‘我’, 1314, 5.12, False]</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>myFun2()<br>[‘我’, 1314, 5.12, False]</p></blockquote></blockquote></blockquote>        <h3 id="4-全局变量global的使用"   >          <a href="#4-全局变量global的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-全局变量global的使用" class="headerlink" title="4.全局变量global的使用"></a>4.全局变量global的使用</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span>  <span class="comment"># 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    x = <span class="number">20</span>  <span class="comment"># 这里实际上是创建了一个新的局部变量 x，而不是修改全局的 x</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数内部 x =&quot;</span>, x)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;函数外部 x =&quot;</span>, x)</span><br></pre></td></tr></table></div></figure><p>输出结果：函数内部 x &#x3D; 20 函数外部 x &#x3D; 10</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = 10  # 全局变量</span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    global x  # 声明 x 是全局变量</span><br><span class="line">    x = 20    # 现在修改的是全局的 x</span><br><span class="line">    print(&quot;函数内部 x =&quot;, x)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line">print(&quot;函数外部 x =&quot;, x)</span><br></pre></td></tr></table></div></figure><p>输出结果：函数内部 x &#x3D; 20 函数外部 x &#x3D; 20</p>        <h3 id="5-在嵌套函数中-如果希望在内部修改外部函数的局部变量，用什么关键字？"   >          <a href="#5-在嵌套函数中-如果希望在内部修改外部函数的局部变量，用什么关键字？" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-在嵌套函数中-如果希望在内部修改外部函数的局部变量，用什么关键字？" class="headerlink" title="5.在嵌套函数中,如果希望在内部修改外部函数的局部变量，用什么关键字？"></a>5.在嵌套函数中,如果希望在内部修改外部函数的局部变量，用什么关键字？</h3>      <p>nonlocal</p><blockquote><blockquote><blockquote><p>def Fun1():<br>   x &#x3D; 5<br>   def Fun2():<br>           nonlocal x<br>           x *&#x3D; x<br>           return x<br>   return Fun2()</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>Fun1()<br>25</p></blockquote></blockquote></blockquote>        <h3 id="6-如何利用函数闭包写一个计时器函数"   >          <a href="#6-如何利用函数闭包写一个计时器函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-如何利用函数闭包写一个计时器函数" class="headerlink" title="6.如何利用函数闭包写一个计时器函数"></a>6.如何利用函数闭包写一个计时器函数</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_master</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始运行程序&quot;</span>)</span><br><span class="line">    start=time.time()</span><br><span class="line">    func()</span><br><span class="line">    stop=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;程序运行时间为<span class="subst">&#123;(stop-start):<span class="number">.2</span>f&#125;</span>秒&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc</span>():</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"></span><br><span class="line">time_master</span><br></pre></td></tr></table></div></figure><p>开始运行程序<br>Hello World!<br>程序运行时间为2.00秒</p>        <h3 id="7-如何不显式调用time-master-来实现一样的功能呢？"   >          <a href="#7-如何不显式调用time-master-来实现一样的功能呢？" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-如何不显式调用time-master-来实现一样的功能呢？" class="headerlink" title="7.如何不显式调用time_master()来实现一样的功能呢？"></a>7.如何不显式调用time_master()来实现一样的功能呢？</h3>      <p>装饰器</p><figure class="highlight py"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_master</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始运行程序&quot;</span>)</span><br><span class="line">    start=time.time()</span><br><span class="line">    func()</span><br><span class="line">    stop=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;程序运行时间为<span class="subst">&#123;(stop-start):<span class="number">.2</span>f&#125;</span>秒&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@time_master</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc</span>():</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></div></figure><p>这里装饰器的实质其实是</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myfunc = time_master(myfunc)</span><br><span class="line">mufunc</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="8-装饰器可以嵌套使用吗？"   >          <a href="#8-装饰器可以嵌套使用吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#8-装饰器可以嵌套使用吗？" class="headerlink" title="8.装饰器可以嵌套使用吗？"></a>8.装饰器可以嵌套使用吗？</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x = func()</span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cube</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x = func()</span><br><span class="line">        <span class="keyword">return</span> x*x*x</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x = func()</span><br><span class="line">        <span class="keyword">return</span> x*x</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@add</span></span><br><span class="line"><span class="meta">@cube</span></span><br><span class="line"><span class="meta">@square</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test())</span><br></pre></td></tr></table></div></figure><p>输出结果：65</p>        <h3 id="9-map函数和lambda表达式"   >          <a href="#9-map函数和lambda表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#9-map函数和lambda表达式" class="headerlink" title="9.map函数和lambda表达式"></a>9.map函数和lambda表达式</h3>      <p>可以将一个函数应用于一个或多个可迭代对象（如列表元组）的每个元素，并返回一个迭代器</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>(function,iterable.……)</span><br></pre></td></tr></table></div></figure><p>function：要应用的函数</p><p>iterable :一个或多个可迭代对象</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*<span class="comment"># 将列表中的每个数字平方*</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] </span><br><span class="line">squared = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, numbers) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(squared))  *<span class="comment"># 输出: [1, 4, 9, 16, 25]*</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将两个列表的对应元素相加</span></span><br><span class="line">nums1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">nums2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">result = <span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x + y, nums1, nums2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))  <span class="comment"># 输出: [5, 7, 9]</span></span><br></pre></td></tr></table></div></figure><p>还可以与内置函数结合使用</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算列表中每个字符串的长度</span></span><br><span class="line">words = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>]</span><br><span class="line">lengths = <span class="built_in">map</span>(<span class="built_in">len</span>, words)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(lengths))  <span class="comment"># 输出: [5, 6, 6]</span></span><br></pre></td></tr></table></div></figure>        <h3 id="10-请使用lambda表达式将下边函数转变为匿名函数？"   >          <a href="#10-请使用lambda表达式将下边函数转变为匿名函数？" class="heading-link"><i class="fas fa-link"></i></a><a href="#10-请使用lambda表达式将下边函数转变为匿名函数？" class="headerlink" title="10. 请使用lambda表达式将下边函数转变为匿名函数？"></a>10. 请使用lambda表达式将下边函数转变为匿名函数？</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun_A</span>(<span class="params">x, y=<span class="number">3</span></span>):</span><br><span class="line">        <span class="keyword">return</span> x * y</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x,y=<span class="number">3</span> : x*y</span><br></pre></td></tr></table></div></figure>        <h3 id="11-你可以利用filter-和lambda表达式快速求出100以内所有3的倍数吗？"   >          <a href="#11-你可以利用filter-和lambda表达式快速求出100以内所有3的倍数吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#11-你可以利用filter-和lambda表达式快速求出100以内所有3的倍数吗？" class="headerlink" title="11. 你可以利用filter()和lambda表达式快速求出100以内所有3的倍数吗？"></a>11. 你可以利用filter()和lambda表达式快速求出100以内所有3的倍数吗？</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> n : <span class="keyword">not</span>(n%<span class="number">3</span>), <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>)))</span><br></pre></td></tr></table></div></figure>        <h3 id="12-还记得列表推导式吗？完全可以使用列表推导式代替filter-和lambda组合，你可以做到吗？"   >          <a href="#12-还记得列表推导式吗？完全可以使用列表推导式代替filter-和lambda组合，你可以做到吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#12-还记得列表推导式吗？完全可以使用列表推导式代替filter-和lambda组合，你可以做到吗？" class="headerlink" title="12. 还记得列表推导式吗？完全可以使用列表推导式代替filter()和lambda组合，你可以做到吗？"></a>12. 还记得列表推导式吗？完全可以使用列表推导式代替filter()和<span class="exturl"><a class="exturl__link"   href="https://so.csdn.net/so/search?q=lambda&spm=1001.2101.3001.7020" >lambda</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>组合，你可以做到吗？</h3>      <p>例如将第3题转为列表推导式即：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">if</span> <span class="keyword">not</span>(i%<span class="number">3</span>)]</span><br></pre></td></tr></table></div></figure>        <h3 id="13-还记得zip吗？使用zip会将两数以元祖的形式绑定在一块，例如："   >          <a href="#13-还记得zip吗？使用zip会将两数以元祖的形式绑定在一块，例如：" class="heading-link"><i class="fas fa-link"></i></a><a href="#13-还记得zip吗？使用zip会将两数以元祖的形式绑定在一块，例如：" class="headerlink" title="13.还记得zip吗？使用zip会将两数以元祖的形式绑定在一块，例如："></a>13.还记得zip吗？使用zip会将两数以元祖的形式绑定在一块，例如：</h3>      <blockquote><blockquote><blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>), (<span class="number">9</span>, <span class="number">10</span>)]</span><br></pre></td></tr></table></div></figure><p>但如果我希望打包的形式是灵活多变的列表而不是元祖（希望是[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]这种形式），你能做到吗？（采用map和lambda表达式）</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x, y : [x, y], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]))</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>]]</span><br></pre></td></tr></table></div></figure><p>注意：强大的map()后边是可以接受多个序列作为参数的</p></blockquote></blockquote></blockquote>        <h3 id="14-生成器-yield"   >          <a href="#14-生成器-yield" class="heading-link"><i class="fas fa-link"></i></a><a href="#14-生成器-yield" class="headerlink" title="14.生成器 yield"></a>14.生成器 yield</h3>      <p>逐步产生值而不是一次性返回所有结果。当调用生成器函数时，它不会立即执行，而是返回一个生成器对象，这个对象可以迭代</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建生成器函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line"><span class="keyword">yield</span> value</span><br><span class="line"></span><br><span class="line"><span class="comment">#简单示例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">gen1=gen()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))<span class="comment">#输出1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))<span class="comment">#输出2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))<span class="comment">#输出3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))<span class="comment">#输出抛出 stopiteration异常</span></span><br></pre></td></tr></table></div></figure>        <h3 id="15-如何用生成器生成斐波那契数列"   >          <a href="#15-如何用生成器生成斐波那契数列" class="heading-link"><i class="fas fa-link"></i></a><a href="#15-如何用生成器生成斐波那契数列" class="headerlink" title="15.如何用生成器生成斐波那契数列"></a>15.如何用生成器生成斐波那契数列</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fiber</span>():</span><br><span class="line">a,b=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> true:</span><br><span class="line"><span class="keyword">yield</span> a</span><br><span class="line">a,b=b,a+b</span><br><span class="line"></span><br><span class="line">f=fiber()</span><br><span class="line"><span class="built_in">next</span>(f)<span class="comment">#输出0</span></span><br><span class="line"><span class="built_in">next</span>(f)<span class="comment">#输出1</span></span><br><span class="line"><span class="built_in">next</span>(f)<span class="comment">#输出1</span></span><br><span class="line"><span class="built_in">next</span>(f)<span class="comment">#输出2</span></span><br></pre></td></tr></table></div></figure>        <h3 id="16-生成器表达式"   >          <a href="#16-生成器表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#16-生成器表达式" class="headerlink" title="16.生成器表达式"></a>16.生成器表达式</h3>      <p>类似于列表推导式，但使用圆括号并返回生成器：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表推导式 - 立即计算</span></span><br><span class="line">squares_list = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]  <span class="comment"># 返回列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器表达式 - 惰性计算</span></span><br><span class="line">squares_gen = (x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))  <span class="comment"># 返回生成器</span></span><br></pre></td></tr></table></div></figure>        <h3 id="17-用迭代和递归的方式分别实现求一个数的阶乘"   >          <a href="#17-用迭代和递归的方式分别实现求一个数的阶乘" class="heading-link"><i class="fas fa-link"></i></a><a href="#17-用迭代和递归的方式分别实现求一个数的阶乘" class="headerlink" title="17.用迭代和递归的方式分别实现求一个数的阶乘"></a>17.用迭代和递归的方式分别实现求一个数的阶乘</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gui</span>(<span class="params">i</span>):</span><br><span class="line"><span class="keyword">if</span> n==<span class="number">1</span> :</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> n*gui(n-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">i</span>):</span><br><span class="line">result = n</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">result*=i</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="18-用递归求斐波那契"   >          <a href="#18-用递归求斐波那契" class="heading-link"><i class="fas fa-link"></i></a><a href="#18-用递归求斐波那契" class="headerlink" title="18.用递归求斐波那契"></a>18.用递归求斐波那契</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gui</span>(<span class="params">i</span>):</span><br><span class="line"><span class="keyword">if</span> i==<span class="number">1</span> <span class="keyword">or</span> i==<span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> gui(n-<span class="number">1</span>)+gui(n-<span class="number">1</span>)</span><br></pre></td></tr></table></div></figure>        <h3 id="19-用递归实现汉诺塔"   >          <a href="#19-用递归实现汉诺塔" class="heading-link"><i class="fas fa-link"></i></a><a href="#19-用递归实现汉诺塔" class="headerlink" title="19.用递归实现汉诺塔"></a>19.用递归实现汉诺塔</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hanoi</span>(<span class="params">n,x,y,z</span>):</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x,<span class="string">&quot;-&gt;&quot;</span>,z)<span class="comment">#如果只有一层，直接将金片从x移动到z</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">hanoi(n-<span class="number">1</span>,x,z,y)<span class="comment">#将x上的n-1的金片移动到y</span></span><br><span class="line"><span class="built_in">print</span>(x,<span class="string">&#x27;-&gt;&#x27;</span>,z)<span class="comment">#最底下的金片从x到z</span></span><br><span class="line">hanoi(n-<span class="number">1</span>,y,x,z)<span class="comment">#将y上的n-1个金片移动到z</span></span><br><span class="line"></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>(请输入汉诺塔层数：))</span><br><span class="line">hanoi(n,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></div></figure>        <h3 id="20-函数文档以及内省展示"   >          <a href="#20-函数文档以及内省展示" class="heading-link"><i class="fas fa-link"></i></a><a href="#20-函数文档以及内省展示" class="headerlink" title="20.函数文档以及内省展示"></a>20.函数文档以及内省展示</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exchange</span>(<span class="params">dollars,rate=<span class="number">6.5</span></span>):</span><br><span class="line">   <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   功能：汇率转换，美元-&gt;人民币</span></span><br><span class="line"><span class="string">   参数：</span></span><br><span class="line"><span class="string">   - dollars: 美元数</span></span><br><span class="line"><span class="string">   - rate: 汇率，默认6.5</span></span><br><span class="line"><span class="string">   返回值：人民币数</span></span><br><span class="line"><span class="string">   &quot;&quot;&quot;</span></span><br><span class="line">   <span class="keyword">return</span> dollars * rate</span><br><span class="line"><span class="built_in">print</span>(exchange.__doc__ )<span class="comment"># 查看函数的文档</span></span><br></pre></td></tr></table></div></figure><p>打印“功能：汇率转换，美元-&gt;人民币<br>参数：</p><ul><li>dollars: 美元数</li><li>rate: 汇率，默认6.5<br>返回值：人民币数”</li></ul>        <h3 id="21-类型注释"   >          <a href="#21-类型注释" class="heading-link"><i class="fas fa-link"></i></a><a href="#21-类型注释" class="headerlink" title="21.类型注释"></a>21.类型注释</h3>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def times(s:str,n:int)-&gt;str:</span><br><span class="line">return s*n</span><br></pre></td></tr></table></div></figure><p>表示希望传入的s,n分别是字符串类型和Int型，并告诉你返回的是str</p><p>但这不是给编译器读的，是方便开发者记住的，不用严格按照期望传参</p>        <h3 id="22-什么是高阶函数"   >          <a href="#22-什么是高阶函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#22-什么是高阶函数" class="headerlink" title="22.什么是高阶函数"></a>22.什么是高阶函数</h3>      <ol><li><strong>接受一个或多个函数作为参数</strong></li><li><strong>将一个函数作为返回值返回</strong></li></ol><p>简单来说，高阶函数就是“操作其他函数”的函数。这使得代码更加抽象、灵活和可复用。</p>        <h3 id="23-高阶函数有哪些，它们有什么作用？"   >          <a href="#23-高阶函数有哪些，它们有什么作用？" class="heading-link"><i class="fas fa-link"></i></a><a href="#23-高阶函数有哪些，它们有什么作用？" class="headerlink" title="23.高阶函数有哪些，它们有什么作用？"></a>23.高阶函数有哪些，它们有什么作用？</h3>      <p>Python 在 <code>functools</code>和内置命名空间中提供了几个非常实用的高阶函数，其中最著名的是 <code>map()</code>, <code>filter()</code>, 和 <code>reduce()</code>。</p><p><strong>1. map(function, iterable, …)</strong></p><p><code>map()</code>函数会将一个函数<strong>映射</strong>应用到可迭代对象（如列表、元组）的每一个元素上，并返回一个迭代器（在 Python 2 中返回列表，Python 3 中返回更高效的 <code>map</code>对象，通常需要转换成列表）。</p><ul><li><p><strong>作用</strong>：对可迭代对象中的每个元素进行某种转换。</p></li><li><p><strong>语法</strong>：<code>map(function, iterable)</code></p></li><li><pre><code class="language-python"> 定义一个平方函数def square(x):    return x ** 2numbers = [1, 2, 3, 4, 5]# 使用 mapsquared_numbers = map(square, numbers)print(list(squared_numbers))  # 输出: [1, 4, 9, 16, 25]# 更常见的做法是使用 lambda 匿名函数，使代码更简洁list1 = map(lambda x: x**2, numbers)print(list(list1))  # 输出: [1, 4, 9, 16, 25]<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**2. filter(function, iterable)**</span><br><span class="line"></span><br><span class="line">`filter()`函数用于**过滤**序列，根据一个返回布尔值（`True`或 `False`）的函数来筛选可迭代对象中满足条件（使函数返回 `True`）的元素，同样返回一个迭代器。</span><br><span class="line"></span><br><span class="line">- **作用**：从可迭代对象中筛选出符合条件的元素。</span><br><span class="line"></span><br><span class="line">- **语法**：`filter(function, iterable)`</span><br><span class="line"></span><br><span class="line">  ```py</span><br><span class="line">  numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class="line">  </span><br><span class="line">  # 定义一个判断偶数的函数</span><br><span class="line">  def is_even(x):</span><br><span class="line">      return x % 2 == 0</span><br><span class="line">  </span><br><span class="line">  # 使用 filter</span><br><span class="line">  even_numbers = filter(is_even, numbers)</span><br><span class="line">  print(list(even_numbers))  # 输出: [2, 4, 6, 8, 10]</span><br><span class="line">  </span><br><span class="line">  # 使用 lambda 函数</span><br><span class="line">  even_numbers_lambda = filter(lambda x: x % 2 == 0, numbers)</span><br><span class="line">  print(list(even_numbers_lambda))  # 输出: [2, 4, 6, 8, 10]</span><br></pre></td></tr></table></div></figure>  **3. functools.reduce(function, iterable[, initializer])**  `reduce()`函数在 `functools`模块中，需要先导入。它会对序列中的元素进行**累积**操作。它接收一个二元函数（有两个参数的函数）、一个可迭代对象和一个可选的初始值。它会用这个二元函数从左到右依次对序列中的元素进行累积计算，最终将序列“缩减”为一个单一的返回值。  - **作用**：对序列中的元素进行累积运算。  - **语法**：`reduce(function, iterable[, initializer])`  - **计算过程**： `reduce(f, [a, b, c, d])`等价于 `f(f(f(a, b), c), d)`。    <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算阶乘</span></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jiec</span>(<span class="params">x,y</span>):</span><br><span class="line"><span class="keyword">return</span> x*y</span><br><span class="line"></span><br><span class="line">num=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">res=reduce(jiec,num)</span><br><span class="line"><span class="built_in">print</span>(res)<span class="comment">#输出24</span></span><br></pre></td></tr></table></div></figure></code></pre></li></ul>        <h3 id="24-wraps装饰器的作用"   >          <a href="#24-wraps装饰器的作用" class="heading-link"><i class="fas fa-link"></i></a><a href="#24-wraps装饰器的作用" class="headerlink" title="24.wraps装饰器的作用"></a>24.wraps装饰器的作用</h3>      <p>在讲解装饰器时，用到了以下代码</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_master</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始运行程序&quot;</span>)</span><br><span class="line">        start=time.time</span><br><span class="line">        func()</span><br><span class="line">        end=time.time</span><br><span class="line">        ptint(<span class="string">f&quot;程序一共运行<span class="subst">&#123;(end=start):<span class="number">.2</span>f&#125;</span>秒。&quot;</span>)</span><br><span class="line">     <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@time_master</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc</span>():</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">11111</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#此时如果你输出myfunc.__name__，会发现输出的是call_func，因为实际调用的其实是这个函数，人们为了避免这一情况，发明了@wraps</span></span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_master</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @dunctools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始运行程序&quot;</span>)</span><br><span class="line">        start=time.time</span><br><span class="line">        func()</span><br><span class="line">        end=time.time</span><br><span class="line">        ptint(<span class="string">f&quot;程序一共运行<span class="subst">&#123;(end=start):<span class="number">.2</span>f&#125;</span>秒。&quot;</span>)</span><br><span class="line">     <span class="keyword">return</span> call_func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc</span>():</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">11111</span>)</span><br></pre></td></tr></table></div></figure><p>此时再打印，就是func了</p>        <h3 id="25-文件操作有哪些方法"   >          <a href="#25-文件操作有哪些方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#25-文件操作有哪些方法" class="headerlink" title="25.文件操作有哪些方法"></a>25.文件操作有哪些方法</h3>      <p>1.open方法</p><p>Python <strong>open()</strong> 方法用于打开一个文件，并返回文件对象。</p><p>在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 <strong>OSError</strong>。</p><p>**注意：**使用 <strong>open()</strong> 方法一定要保证关闭文件对象，即调用 <strong>close()</strong> 方法。</p><p><strong>open()</strong> 函数常用形式是接收两个参数：文件名(file)和模式(mode)。</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(file, mode=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">mode参数有哪些</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">t</td><td align="left">文本模式 (默认)。</td></tr><tr><td align="left">x</td><td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td align="left">b</td><td align="left">二进制模式。</td></tr><tr><td align="left">+</td><td align="left">打开一个文件进行更新(可读可写)。</td></tr><tr><td align="left">U</td><td align="left">通用换行模式（<strong>Python 3 不支持</strong>）。</td></tr><tr><td align="left">r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="left">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="left">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table></div><p>默认为文本模式，如果要以二进制模式打开，加上 <strong>b</strong> 。</p><p>open是传统方法，我们更推荐使用with</p>        <h3 id="26-什么是with语句"   >          <a href="#26-什么是with语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#26-什么是with语句" class="headerlink" title="26.什么是with语句"></a>26.什么是with语句</h3>      <p><code>with</code>语句是 Python 中用于资源管理的上下文管理协议实现，特别适合文件操作等需要明确释放资源的场景。</p><p>文件操作场景</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统方式（不推荐）</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;file.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    data = f.read()</span><br><span class="line">    <span class="comment"># 处理文件内容</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()  <span class="comment"># 必须确保关闭文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with 语句方式（推荐）</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    <span class="comment"># 处理文件内容</span></span><br><span class="line"><span class="comment"># 文件会在代码块结束后自动关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 with 写入文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;第一行内容\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">&#x27;第二行内容\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 文件已自动关闭且内容已保存</span></span><br></pre></td></tr></table></div></figure><p>数据库连接场景</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 with 管理数据库连接</span></span><br><span class="line"><span class="keyword">with</span> sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>) <span class="keyword">as</span> conn:</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&#x27;SELECT * FROM users&#x27;</span>)</span><br><span class="line">    results = cursor.fetchall()</span><br><span class="line"><span class="comment"># 连接自动关闭</span></span><br></pre></td></tr></table></div></figure><p><img src="/images/image-20250913103903612.png" alt="image-20250913103903612"></p>        <h3 id="27-Pashlib中path的使用（旧版本使用os-path）"   >          <a href="#27-Pashlib中path的使用（旧版本使用os-path）" class="heading-link"><i class="fas fa-link"></i></a><a href="#27-Pashlib中path的使用（旧版本使用os-path）" class="headerlink" title="27.Pashlib中path的使用（旧版本使用os.path）"></a>27.Pashlib中path的使用（旧版本使用os.path）</h3>      <p><strong>1.创建</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Path对象</span></span><br><span class="line">p=Path(<span class="string">&#x27;D:/python/1.py&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line">p1=Path(<span class="string">&#x27;D:/python&#x27;</span>)</span><br><span class="line">p2=p1/<span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(p2)</span><br></pre></td></tr></table></div></figure><p>输出结果 D:\python\1.py</p><p>D:\python\123</p><p><u><strong>注意斜杠和反斜杠</strong></u></p><p><strong>2.cwd()获取当前路径</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path=Path.cwd()</span><br><span class="line"><span class="built_in">print</span>(path)</span><br></pre></td></tr></table></div></figure><p>D：\python</p><p><strong>3.Path.stat获取当前文件信息</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p=Path(&#x27;1.py&#x27;)</span><br><span class="line">print(p.stat())</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jos.stat_result(st_mode=33206, st_ino=8444249301448143, st_dev=2561774433, st_nlink=1, st_uid=0, st_gid=0, st_size=4, st_atime=1525926554, st_mtime=1525926554, st_ctime=1525926554)</span><br></pre></td></tr></table></div></figure><p><strong>4.Path.exists判断当前路径是否是文件或文件夹</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Path(<span class="string">&#x27;.&#x27;</span>).exists()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Path(<span class="string">&#x27;1.py&#x27;</span>).exists()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Path(<span class="string">&#x27;2.py&#x27;</span>).exists()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></div></figure><p><strong>5.Path.is_dir()判断该路径是否是文件夹，Path.is_file()判断该路径是否是文件</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p1:&#x27;</span>)</span><br><span class="line">p1 = Path(<span class="string">&#x27;D:/python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p1.is_dir())</span><br><span class="line"><span class="built_in">print</span>(p1.is_file())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p2:&#x27;</span>)</span><br><span class="line">p2 = Path(<span class="string">&#x27;D:/python/1.py&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p2.is_dir())</span><br><span class="line"><span class="built_in">print</span>(p2.is_file())</span><br><span class="line"></span><br><span class="line"><span class="comment">#当路径不存在时也会返回Fasle</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;wrong path:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(Path(<span class="string">&#x27;D:/NoneExistsPath&#x27;</span>).is_dir())</span><br><span class="line"><span class="built_in">print</span>(Path(<span class="string">&#x27;D:/NoneExistsPath&#x27;</span>).is_file())</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p1:</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">p2:</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">wrong path:</span><br><span class="line">False</span><br><span class="line">False</span><br></pre></td></tr></table></div></figure><p><strong>6.Path.iterdir()</strong></p><p>当path为文件夹时，通过yield产生path文件夹下的所有文件、文件夹路径的迭代器</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = Path.cwd()</span><br><span class="line">for i in p.iterdir():</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\python\1.py</span><br><span class="line">D:\python\11.py</span><br><span class="line">D:\python\1111.py</span><br><span class="line">D:\python\11111.py</span><br><span class="line">D:\python\dir</span><br></pre></td></tr></table></div></figure><p><strong>7.Path.rename(target)</strong></p><p>当targrt是string时，重命名文件或文件夹</p><p>当target是path时，重命名并移动文件或文件夹</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p1 = Path(&#x27;1.py&#x27;)</span><br><span class="line">p1.rename(&#x27;new_name.py&#x27;)</span><br><span class="line"></span><br><span class="line">p2 = Path(&#x27;11.py&#x27;)</span><br><span class="line">target = Path(&#x27;new_dir/new_name.py&#x27;)</span><br><span class="line">p2.rename(target)</span><br></pre></td></tr></table></div></figure><p>12.Path.replace(target)<br>重命名当前文件或文件夹，如果target所指示的文件或文件夹已存在，则覆盖原文件</p><p>13.Path.parent(),Path.parents()</p>        <h3 id="parent获取path的上级路径，parents获取path的所有上级路径"   >          <a href="#parent获取path的上级路径，parents获取path的所有上级路径" class="heading-link"><i class="fas fa-link"></i></a><a href="#parent获取path的上级路径，parents获取path的所有上级路径" class="headerlink" title="parent获取path的上级路径，parents获取path的所有上级路径"></a>parent获取path的上级路径，parents获取path的所有上级路径</h3>      <p>14.Path.is_absolute()<br>判断path是否是绝对路径</p><p>15.Path.match(pattern)<br>判断path是否满足pattern</p><p>16.Path.rmdir()<br>当path为空文件夹的时候，删除该文件夹</p><p>17.Path.name<br>获取path文件名</p><p>18.Path.suffix<br>获取path文件后缀</p>        <h3 id="28-Pickle模块"   >          <a href="#28-Pickle模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#28-Pickle模块" class="headerlink" title="28.Pickle模块"></a>28.Pickle模块</h3>      <p>将Python对象序列化（二进制）</p><p>使用dump和</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">x,y,z=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;date.pkl&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">pickle.dump(x,f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件中是一堆乱码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;date.pkl&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">pickle.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以读回来源码了</span></span><br></pre></td></tr></table></div></figure>        <h3 id="29-异常（Exception）"   >          <a href="#29-异常（Exception）" class="heading-link"><i class="fas fa-link"></i></a><a href="#29-异常（Exception）" class="headerlink" title="29.异常（Exception）"></a>29.异常（Exception）</h3>      <p>在python中如果你违背了python的语法规则或者其他原因，就会出现异常，此时编译器会给你红色报错</p><p>例如</p><p>如果你计算 1&#x2F;0 ，我们知道0不能被除，那么就会抛出<code>ZeroDivisionerror</code>异常</p><p>如果你用字符串和数字相加，就会抛出<code>TypeError</code>异常</p><p>那么有没有什么办法让我们可以提前避免报错发现异常并修正呢</p><p><strong>try except语句</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">520</span>+<span class="string">&quot;fish&quot;</span></span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;出错了&quot;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><p>当然，如果错误类型不匹配的话，是无法匹配的，也就是说如果你把上面的换成<code>ZeroDivisionError</code></p><p>仍然会报错。</p><p>你也可以同时捕获多种异常，比如<code>except（ZeroDivisionerror，TypeError）</code></p><p>你也可以不选择具体类型的异常</p><p><strong>try except else finally</strong> </p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 可能引发异常的代码</span></span><br><span class="line">    risky_operation()</span><br><span class="line"><span class="keyword">except</span> SpecificError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 处理特定异常</span></span><br><span class="line">    handle_error(e)</span><br><span class="line"><span class="keyword">except</span> AnotherError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 处理另一种异常</span></span><br><span class="line">    handle_another(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 捕获所有其他异常</span></span><br><span class="line">    handle_generic(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 没有异常时执行</span></span><br><span class="line">    on_success()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 无论是否异常都执行</span></span><br><span class="line">    cleanup()</span><br></pre></td></tr></table></div></figure><p><strong>raise</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主动抛出异常</span></span><br><span class="line"><span class="keyword">if</span> bad_condition:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;说明错误原因&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新抛出当前异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    something()</span><br><span class="line"><span class="keyword">except</span> SomeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;处理部分异常&quot;</span>)</span><br><span class="line">    <span class="keyword">raise</span>  <span class="comment"># 重新抛出给上层处理</span></span><br></pre></td></tr></table></div></figure><p><strong>assert</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 断言条件为真，否则抛出 AssertionError</span></span><br><span class="line"><span class="keyword">assert</span> condition, <span class="string">&quot;错误信息&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> condition:</span><br><span class="line">    <span class="keyword">raise</span> AssertionError(<span class="string">&quot;错误信息&quot;</span>)</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表元组字符串</title>
      <link href="/2025/09/09/%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2025/09/09/%E5%88%97%E8%A1%A8%E5%85%83%E7%BB%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[        <h3 id="1-列表都可以存放一些什么东西？"   >          <a href="#1-列表都可以存放一些什么东西？" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-列表都可以存放一些什么东西？" class="headerlink" title="1. 列表都可以存放一些什么东西？"></a><strong>1.</strong> <strong>列表都可以存放一些什么东西？</strong></h3>      <p>我们说 Python 的列表是一个打了激素的数组，如果把数组比喻成集装箱，那么 Python 的列表就是一个大仓库，Ta 可以存放我们已经学习过的任何数据类型。</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mix = [1, ‘小’, 3.14, [1, 2, 3]]</span><br></pre></td></tr></table></div></figure>        <h3 id="2-向列表增加元素有哪些方法？"   >          <a href="#2-向列表增加元素有哪些方法？" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-向列表增加元素有哪些方法？" class="headerlink" title="2. 向列表增加元素有哪些方法？"></a><strong>2. 向列表增加元素有哪些方法？</strong></h3>      <p>append(),extend(),insert()</p>        <h5 id="extend-和append-都是向列表末端添加元素，区别在于："   >          <a href="#extend-和append-都是向列表末端添加元素，区别在于：" class="heading-link"><i class="fas fa-link"></i></a><a href="#extend-和append-都是向列表末端添加元素，区别在于：" class="headerlink" title="extend()和append()都是向列表末端添加元素，区别在于："></a>extend()和append()都是向列表末端添加元素，区别在于：</h5>      <p>append是将参数作为一个元素添加到列表的末尾</p><p>extend是将参数作为一个列表去扩展列表的末尾</p><blockquote><blockquote><blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;h&#x27;</span>]</span><br><span class="line">name.append(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">name</span><br><span class="line">[<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">name.extend([<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">name</span><br><span class="line">[<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">name.append([<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;m&#x27;</span>])</span><br><span class="line">name</span><br><span class="line">[<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, [<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;m&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert()：有两个参数，第一个参数是插入的位置，第二个参数是插入的元素</span><br><span class="line"></span><br><span class="line">member = [<span class="string">&#x27;小甲鱼&#x27;</span>, <span class="string">&#x27;小布丁&#x27;</span>, <span class="string">&#x27;小宝贝&#x27;</span>]</span><br><span class="line"></span><br><span class="line">\&gt;&gt;&gt; member.insert(<span class="number">1</span>, <span class="string">&#x27;厉害&#x27;</span>)</span><br><span class="line"></span><br><span class="line">\&gt;&gt;&gt; menber</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;小甲鱼&#x27;</span>, <span class="string">&#x27;厉害&#x27;</span>, <span class="string">&#x27;小布丁&#x27;</span>, <span class="string">&#x27;小宝贝&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 3.for循环的应用</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"></span><br><span class="line">member = [<span class="string">&#x27;小甲鱼&#x27;</span>, <span class="number">88</span>, <span class="string">&#x27;黑夜&#x27;</span>, <span class="number">90</span>, <span class="string">&#x27;迷途&#x27;</span>, <span class="number">85</span>, <span class="string">&#x27;怡静&#x27;</span>, <span class="number">90</span>, <span class="string">&#x27;秋舞斜阳&#x27;</span>, <span class="number">88</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> member:</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">print</span>(each)</span><br></pre></td></tr></table></div></figure></blockquote></blockquote></blockquote>        <h3 id="4-下边的列表分片操作会打印什么内容？"   >          <a href="#4-下边的列表分片操作会打印什么内容？" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-下边的列表分片操作会打印什么内容？" class="headerlink" title="4. 下边的列表分片操作会打印什么内容？"></a>4. 下边的列表分片操作会打印什么内容？</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">list1[<span class="number">2</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></div></figure><p>左闭右开 应该是[2,9,7]</p>        <h3 id="5-请问-list1-0-和-list1-0-1-一样吗？"   >          <a href="#5-请问-list1-0-和-list1-0-1-一样吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-请问-list1-0-和-list1-0-1-一样吗？" class="headerlink" title="5. 请问 list1[0] 和 list1[0:1] 一样吗？"></a>5. 请问 list1[0] 和 list1[0:1] 一样吗？</h3>      <p>不一样，list1[0] 返回第0个元素的值，list1[0:1] 返回一个只含有第0个元素的列表。</p>        <h3 id="6-如果你每次想从列表的末尾取出一个元素，并将这个元素插入到列表的最前边，你会怎么做？"   >          <a href="#6-如果你每次想从列表的末尾取出一个元素，并将这个元素插入到列表的最前边，你会怎么做？" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-如果你每次想从列表的末尾取出一个元素，并将这个元素插入到列表的最前边，你会怎么做？" class="headerlink" title="6.如果你每次想从列表的末尾取出一个元素，并将这个元素插入到列表的最前边，你会怎么做？"></a>6.如果你每次想从列表的末尾取出一个元素，并将这个元素插入到列表的最前边，你会怎么做？</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1.insert(<span class="number">0</span>,list1.pop())</span><br></pre></td></tr></table></div></figure>        <h3 id="7-在进行分片的时候，我们知道分片的开始和结束位置需要进行指定，但其实还有另外一个隐藏的设置：步长。"   >          <a href="#7-在进行分片的时候，我们知道分片的开始和结束位置需要进行指定，但其实还有另外一个隐藏的设置：步长。" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-在进行分片的时候，我们知道分片的开始和结束位置需要进行指定，但其实还有另外一个隐藏的设置：步长。" class="headerlink" title="7. 在进行分片的时候，我们知道分片的开始和结束位置需要进行指定，但其实还有另外一个隐藏的设置：步长。"></a>7. 在进行分片的时候，我们知道分片的开始和结束位置需要进行指定，但其实还有另外一个隐藏的设置：步长。</h3>      <blockquote><p>在普通的分片操作中，步长默认设置为1，表示逐个遍历元素。其实我们可以人为调整步长以达到不可告人的秘密。</p></blockquote><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">list1[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></div></figure><p>之前提到的“简洁”分片操作在这里有效：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1[::<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></div></figure><p>步长可以是负数，改变方向（从尾部开始向左走）：</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1[::-<span class="number">2</span>]</span><br><span class="line">[<span class="number">8</span>, <span class="number">9</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></div></figure>        <h3 id="8-可以利用分片完成列表的拷贝-list2-list1-，那事实上可不可以直接写成-list2-list1-更加简洁呢？"   >          <a href="#8-可以利用分片完成列表的拷贝-list2-list1-，那事实上可不可以直接写成-list2-list1-更加简洁呢？" class="heading-link"><i class="fas fa-link"></i></a><a href="#8-可以利用分片完成列表的拷贝-list2-list1-，那事实上可不可以直接写成-list2-list1-更加简洁呢？" class="headerlink" title="8. 可以利用分片完成列表的拷贝 list2 &#x3D; list1[:]，那事实上可不可以直接写成 list2 &#x3D; list1 更加简洁呢？"></a>8. 可以利用分片完成列表的拷贝 list2 &#x3D; list1[:]，那事实上可不可以直接写成 list2 &#x3D; list1 更加简洁呢？</h3>      <p>千万不可以！</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list2 = list1[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list2</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list3 = list1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list3</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></div></figure><p>如果对list1进行排序，list1变为[1，2，3，7，8，9]</p>        <h5 id="list2不变，而输出list3会发现，它也被排序了"   >          <a href="#list2不变，而输出list3会发现，它也被排序了" class="heading-link"><i class="fas fa-link"></i></a><a href="#list2不变，而输出list3会发现，它也被排序了" class="headerlink" title="list2不变，而输出list3会发现，它也被排序了"></a>list2不变，而输出list3会发现，它也被排序了</h5>      <p><img src="/images/image-20250909084404231.png" alt="image-20250909084404231"></p>        <h3 id="9-列表还有两个内置方法没给大家介绍，不过聪明的你应该可以自己摸索使用的门道吧：copy-和-clear"   >          <a href="#9-列表还有两个内置方法没给大家介绍，不过聪明的你应该可以自己摸索使用的门道吧：copy-和-clear" class="heading-link"><i class="fas fa-link"></i></a><a href="#9-列表还有两个内置方法没给大家介绍，不过聪明的你应该可以自己摸索使用的门道吧：copy-和-clear" class="headerlink" title="9.列表还有两个内置方法没给大家介绍，不过聪明的你应该可以自己摸索使用的门道吧：copy() 和 clear()"></a>9.列表还有两个内置方法没给大家介绍，不过聪明的你应该可以自己摸索使用的门道吧：copy() 和 clear()</h3>      <p>copy() 方法跟使用切片拷贝是一样的：</p><blockquote><blockquote><blockquote><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; list2 = list1.copy()</span><br><span class="line">&gt;&gt;&gt; list2</span><br><span class="line">&gt;&gt;&gt; [1, [1, 2, [&#x27;小甲鱼&#x27;]], 3, 5, 8, 13, 18]</span><br><span class="line"></span><br><span class="line">**clear() 方法用于清空列表的元素，但要注意，清空完后列表仍然还在哦，只是变成一个空列表。**</span><br><span class="line">list2.clear()</span><br><span class="line">list2</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 10.列表推导式/列表解析</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p> [i*i for i in range(10)]<br>输出 [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</p></blockquote></blockquote></blockquote><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 11.补充列表的一些内置函数BIF</span><br><span class="line"></span><br><span class="line">list.count(a)：列表list中元素a出现的次数；</span><br><span class="line"></span><br><span class="line">list.index(a)：列表list中元素a第一次出现的索引号</span><br><span class="line"></span><br><span class="line">list.index(a，b，c)：列表list中元素a在索引范围[b，c]中第一次出现的索引号</span><br><span class="line"></span><br><span class="line">list.reverse()：翻转list</span><br><span class="line"></span><br><span class="line">list.sort()：排序，默认从小到大排序</span><br><span class="line"></span><br><span class="line">list.sort(reverse=True)：从大到小排序</span><br><span class="line"></span><br><span class="line">### 12.元组和列表的最大区别是什么？</span><br><span class="line"></span><br><span class="line">元组不可修改，而列表可以修改。所以要求数据不能修改时使用元组，频繁要求修改数据时使用列表</span><br><span class="line"></span><br><span class="line">当然格式也有区别</span><br><span class="line"></span><br><span class="line">元组是（）括号</span><br><span class="line"></span><br><span class="line">列表是[]</span><br><span class="line"></span><br><span class="line">### 13.元组可以使用的方法有哪些</span><br><span class="line"></span><br><span class="line">count():计算并返回指定函数的数量</span><br><span class="line"></span><br><span class="line">index():寻找并返回参数的索引值</span><br><span class="line"></span><br><span class="line">### 13.创建一个元组，什么情况下逗号和小括号必须同时存在，缺一不可？</span><br><span class="line"></span><br><span class="line">在拼接只有一个元素的元组的时候，例如我们课上举的例题：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; temp = (‘小甲鱼’, ‘黑夜’, ‘迷途’, ‘小布丁’)</span><br><span class="line">###### 如果我想在“黑夜”和“迷途”之间插入“怡静”，我们应该：</span><br><span class="line">&gt;&gt;&gt; temp = temp[:2] + (‘怡静’,) + temp[2:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 14.x, y, z = 1, 2, 3 请问x, y, z是元组吗？</span><br><span class="line"></span><br><span class="line">**&lt;u&gt;所有的多对象的、逗号分隔的、没有明确用符号定义的这些集合默认的类型都是元组&lt;/u&gt;**，自己在IDLE中键入以下代码，并体会一下：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; ```python</span><br><span class="line">&gt;&gt;&gt; x, y, z = 1, 2, 3</span><br><span class="line">&gt;&gt;&gt; type(x)</span><br><span class="line">&gt;&gt;&gt; &lt;class &#x27;int&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; h = x, y, z</span><br><span class="line">&gt;&gt;&gt; type(h)</span><br><span class="line">&gt;&gt;&gt; &lt;class &#x27;tuple&#x27;&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="15-file1-open-‘C-windows-temp-readme-txt’-‘r’-表示以只读方式打开“C-windows-temp-readme-txt”这个文本文件，但事实上这个语句会报错，知道为什么吗？你会如何修改？"   >          <a href="#15-file1-open-‘C-windows-temp-readme-txt’-‘r’-表示以只读方式打开“C-windows-temp-readme-txt”这个文本文件，但事实上这个语句会报错，知道为什么吗？你会如何修改？" class="heading-link"><i class="fas fa-link"></i></a><a href="#15-file1-open-‘C-windows-temp-readme-txt’-‘r’-表示以只读方式打开“C-windows-temp-readme-txt”这个文本文件，但事实上这个语句会报错，知道为什么吗？你会如何修改？" class="headerlink" title="15.file1 &#x3D; open(‘C:\windows\temp\readme.txt’, ‘r’) 表示以只读方式打开“C:\windows\temp\readme.txt”这个文本文件，但事实上这个语句会报错，知道为什么吗？你会如何修改？"></a>15.file1 &#x3D; open(‘C:\windows\temp\readme.txt’, ‘r’) 表示以只读方式打开“C:\windows\temp\readme.txt”这个文本文件，但事实上这个语句会报错，知道为什么吗？你会如何修改？</h3>      <p>会报错是因为在字符串中，我们约<strong>定“\t”和“\r”分别表示“横向制表符（TAB）”和“回车符</strong>”（详见：<span class="exturl"><a class="exturl__link"   href="http://bbs.fishc.com/thread-92997-1-1.html%EF%BC%89%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%B9%B6%E4%B8%8D%E4%BC%9A%E6%8C%89%E7%85%A7%E6%88%91%E4%BB%AC%E8%AE%A1%E5%88%92%E7%9A%84%E8%B7%AF%E5%BE%84%E5%8E%BB%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E3%80%82" >http://bbs.fishc.com/thread-92997-1-1.html），因此并不会按照我们计划的路径去打开文件。</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>Python 为我们铺好了解决的道路，只需要使用原始字符串操作符（R或r）即可：</p><blockquote><blockquote><blockquote><p>file1 &#x3D; open(r’C:\windows\temp\readme.txt’, ‘r’)</p></blockquote></blockquote></blockquote>        <h3 id="16-写一个检查密码安全性的代码"   >          <a href="#16-写一个检查密码安全性的代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#16-写一个检查密码安全性的代码" class="headerlink" title="16.写一个检查密码安全性的代码"></a>16.写一个检查密码安全性的代码</h3>      <p><img src="/images/image-20250909095256638.png" alt="image-20250909095256638"></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">symbols = <span class="string">r&#x27;&#x27;&#x27;`!@#$%^&amp;*()_+-=/*&#123;&#125;[]\|&#x27;&quot;;:/?,.&lt;&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line">chars = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">nums = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line"></span><br><span class="line">passwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入需要检查的密码组合：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断长度</span></span><br><span class="line"></span><br><span class="line">length = <span class="built_in">len</span>(passwd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (passwd.isspace() <span class="keyword">or</span> length == <span class="number">0</span>) :</span><br><span class="line">    passwd = <span class="built_in">input</span>(<span class="string">&quot;您输入的密码为空（或空格），请重新输入：&quot;</span>)</span><br><span class="line">    length = <span class="built_in">len</span>(passwd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> length &lt;= <span class="number">8</span>:</span><br><span class="line">    flag_len = <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">8</span> &lt; length &lt; <span class="number">16</span>:</span><br><span class="line">    flag_len = <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    flag_len = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">flag_con = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否包含特殊字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> passwd:</span><br><span class="line">    <span class="keyword">if</span> each <span class="keyword">in</span> symbols:</span><br><span class="line">        flag_con += <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否包含字母</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> passwd:</span><br><span class="line">    <span class="keyword">if</span> each <span class="keyword">in</span> chars:</span><br><span class="line">        flag_con += <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否包含数字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> passwd:</span><br><span class="line">    <span class="keyword">if</span> each <span class="keyword">in</span> nums:</span><br><span class="line">        flag_con += <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您的密码安全级别评定为：&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> flag_len == <span class="number">1</span> <span class="keyword">or</span> flag_con == <span class="number">1</span> :</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;低&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> flag_len == <span class="number">3</span> <span class="keyword">and</span> flag_con == <span class="number">3</span> <span class="keyword">and</span> (passwd[<span class="number">0</span>] <span class="keyword">in</span> chars):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;高&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请继续保持&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;中&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请按以下方式提升您的密码安全级别：\n\</span></span><br><span class="line"><span class="string">    \t1. 密码必须由数字、字母及特殊字符三种组合\n\</span></span><br><span class="line"><span class="string">    \t2. 密码只能由字母开头\n\</span></span><br><span class="line"><span class="string">    \t3. 密码长度不能低于16位&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="17-字符串常用方法"   >          <a href="#17-字符串常用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#17-字符串常用方法" class="headerlink" title="17.字符串常用方法"></a>17.字符串常用方法</h3>      <div class="table-container"><table><thead><tr><th>capitalize()</th><th>把字符串的第一个字母修改为大写</th></tr></thead><tbody><tr><td>casefold()</td><td>把整个字符串的内容转为小写</td></tr><tr><td>center(width)</td><td>把字符串居中并用空格填充至长度width的新字符串</td></tr><tr><td>count(sub,start,end)</td><td>统计字符串sub在索引start到end（不包括end）中出现了几次</td></tr><tr><td>find(sub,start,end)</td><td>检查sub字符串是否被包含，有则返回索引值，否则返回-1</td></tr><tr><td>index(sub,start,end)</td><td>和find方法一致，但是如果sub不在指定字符串中会返回异常</td></tr><tr><td>isalnum()</td><td>如果字符串至少有一个字符且字符都是数字或字母则返回True，否则返回false</td></tr><tr><td>isalpha（）</td><td>如果字符串至少有一个字符且字符都是字母则返回True，否则返回false</td></tr><tr><td>isdigit（）</td><td>如果字符串中只包含数字则返回true，否则false</td></tr><tr><td>isdemical()</td><td>十进制数</td></tr><tr><td>islower()</td><td>如果字符串中至少包含一个区分大小写的字符，并且这些字符都是小写，则返回 True，否则返回 False。</td></tr><tr><td>isupper()</td><td>如果字符串中至少包含一个区分大小写的字符，并且这些字符都是大写，则返回 True，否则返回 False。</td></tr><tr><td>join(sub)</td><td>以字符串作为分隔符，插入到sub的所有字符间</td></tr><tr><td>ljuest(width)</td><td>返回一个左对齐的字符串，并使用空格填充</td></tr><tr><td>lower()</td><td>把大写字符转为小写</td></tr><tr><td>lstrip()</td><td>去掉字符串左边所有空格</td></tr><tr><td>replace(“old”,”new”,count)</td><td>把字符串中的 old 子字符串替换成 new 子字符串，如果 count 指定，则替换不超过 count 次。</td></tr><tr><td>translate(table)</td><td>根据 table 的规则（可以由 str.maketrans(‘a’, ‘b’) 定制）转换字符串中的字符。</td></tr><tr><td>zfill(width)</td><td>返回长度为 width 的字符串，原字符串右对齐，前边用 0 填充。</td></tr><tr><td>strip(chars)</td><td>删除字符串前边和后边所有的空格，chars 参数可以定制删除的字符，可选。</td></tr><tr><td>swapcase()</td><td>翻转大小写</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫理论入门</title>
      <link href="/2025/09/09/%E7%88%AC%E8%99%AB%E7%90%86%E8%AE%BA/"/>
      <url>/2025/09/09/%E7%88%AC%E8%99%AB%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[        <h3 id="1-什么是爬虫？"   >          <a href="#1-什么是爬虫？" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-什么是爬虫？" class="headerlink" title="1.什么是爬虫？"></a>1.什么是爬虫？</h3>      <p>爬虫顾名思义，就像一个在互联网这张大网上沿着链接不断爬行的虫子，不断获取它收集到的所有信息</p><p>它按照一定的规则，<strong>自动地抓取互联网信息的脚本或程序</strong></p>        <h3 id="2-爬虫的工作原理是什么？"   >          <a href="#2-爬虫的工作原理是什么？" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-爬虫的工作原理是什么？" class="headerlink" title="2.爬虫的工作原理是什么？"></a>2.爬虫的工作原理是什么？</h3>      <p>爬虫的本质其实是<strong>不断发送http请求</strong></p><p>那么如何发送http请求呢？</p><p>可以用python的<code>requests</code>库</p><p>只要我们获取到了URL(<strong>统一资源定位符</strong>，每个网页都有自己对应的唯一的URL)，就可以通过一些方法发送http请求</p><p>发送之后服务器就会收到我们的请求，向我们发出响应，为http响应，它通常包含<strong>状态码，头部信息，内容主体</strong></p><p>通过服务器的响应，我们可以储存和分析数据，这里由于我们爬取的目的不同，做法也不尽相同。</p>        <h3 id="3-什么是http协议？"   >          <a href="#3-什么是http协议？" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-什么是http协议？" class="headerlink" title="3.什么是http协议？"></a>3.什么是http协议？</h3>      <p>我们经常可以看到http协议这个词，那么http到底是什么？</p><p>如果你学过计算机导论或者计算机网络，对这个名词一定不陌生</p><p><strong>HTTP全称 “<code>HyperText Transfer Protoca</code>”<strong>即</strong>超文本传输协议</strong>，它是位于<strong>应用层</strong>的一种从<strong>客户到服务器</strong>的协议。</p><p>一个完整的Http请求包含三个部分</p><p><strong>请求行，请求头，请求体</strong></p>        <h3 id="4-请求行-Request-Line"   >          <a href="#4-请求行-Request-Line" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-请求行-Request-Line" class="headerlink" title="4.请求行(Request Line)"></a>4.请求行(Request Line)</h3>      <p>一个完整的请求行长这样 </p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“GET /index.html HTTP/1.1”</span><br></pre></td></tr></table></div></figure><ul><li><p><strong>方法</strong>: GET（获取资源）、POST（提交数据）、PUT、DELETE等</p></li><li><p><strong>路径</strong>: &#x2F;index.html（请求的资源路径）（有时候除了资源路径，我们还可以设置查询参数来查询信息，不同信息用&amp;分割，查询参数通常在问号后面），比如</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.douban.com/movie/top250?start=75&amp;filter=unwatched</span><br></pre></td></tr></table></div></figure></li><li><p><strong>协议版本</strong>: HTTP&#x2F;1.1</p></li></ul>        <h3 id="5-请求方法有哪些？"   >          <a href="#5-请求方法有哪些？" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-请求方法有哪些？" class="headerlink" title="5.请求方法有哪些？"></a>5.请求方法有哪些？</h3>      <div class="table-container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>从服务器<strong>获取资源</strong>，不能更改数据，只能请求</td></tr><tr><td>POST</td><td>向服务器发送数据，<strong>创建新资源</strong>。可以提交表单，文件（发送的数据包含在请求体中）</td></tr><tr><td>PUT</td><td>向服务器发送数据，<strong>更新现有资源（修改资源）</strong>。不存在则创新。与POST的区别是，PUT 通常是幂等的，即多次执行相同的 PUT 请求不会产生不同的结果。</td></tr><tr><td>DELETE</td><td>从服务器中<strong>删除指定资源</strong>，请求中包含要删除的资源符</td></tr><tr><td>PATCH</td><td>部分<strong>修改资源</strong>，与PUT类似，但是PATCH不替换整个资源，只修改部分数据</td></tr><tr><td>HEAD</td><td>类似于GET,服务器<strong>只返回响应头部</strong>，不返回实际数据</td></tr><tr><td>OPTIONS</td><td>返回服务器支持的<strong>HTTP方法</strong>，用于检查服务支持哪些请求方法，通常用于跨域资源共享的预检请求</td></tr><tr><td>TRACE</td><td><strong>回显服务器收到的请求</strong>，主要用于诊断。客户端可以查看请求在服务器中的处理路径。</td></tr><tr><td>CONNECTION</td><td>建立一个到服务器的隧道，通常用于 HTTPS 连接。客户端可以通过该隧道发送加密的数据。</td></tr></tbody></table></div>        <h3 id="6-请求头（Request-Headers）"   >          <a href="#6-请求头（Request-Headers）" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-请求头（Request-Headers）" class="headerlink" title="6.请求头（Request Headers）"></a>6.请求头（Request Headers）</h3>      <p>它包含了关于客户端请求的附加信息，以<strong>键值对</strong>的形式传递给服务器</p><p> <strong>1.基础标识头 User-Agent</strong>(用户代理)</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36</span><br></pre></td></tr></table></div></figure><p>它告诉服务器，客户端的类型和版本</p><p><strong>爬虫重要性</strong>：⭐⭐⭐⭐⭐</p><p><strong>说明</strong>：服务器通过这个字段判断是浏览器还是爬虫。<strong>如果不设置或使用默认值，很容易被识别为爬虫</strong>。</p><p><code>Mozilla/5.0</code>其实是一个出于兼容性考虑而保留的“遗产”令牌，当时很多网站会检查User-Agent,如果是Mozilla就提供高级功能（框架），否则提供基础页面。为了能接收到最好的网页，现在几乎所有浏览器都自称是Mozilla以保持兼容。</p><p><code>Windows NT 10.0; Win64; x64</code>描述操作系统平台。</p><p>注意：由于 <code>User-Agent</code>字符串变得非常复杂、容易伪造，并且可能被用于<strong>指纹追踪</strong>用户，谷歌等公司正在推动一项名为 <strong><code>User-Agent Client Hints</code></strong> 的新标准来逐步取代它。新标准旨在让用户拥有更多隐私控制权，只在必要时向服务器提供特定的设备信息，而不是一次性全部发送。</p><p>2.<strong>主机（host）</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Host: cgyy.nenu.edu.cn</span><br></pre></td></tr></table></div></figure><p>它是HTTP&#x2F;1.1必需字段，可以<strong>指定请求的目标服务器域名</strong></p><p>3.<strong>内容协商头 Accept</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br></pre></td></tr></table></div></figure><p>告诉服务器，客户端能够处理哪些内容类型</p><p>常见值：</p><p>text&#x2F;html  HTML文档</p><p>application&#x2F;json  json数据</p><p>image&#x2F;*-  所有图片类型</p><p>4.<strong>可接受语言Accept-Language</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br></pre></td></tr></table></div></figure><ul><li><strong>作用</strong>：告诉服务器客户端的语言偏好</li><li><strong>爬虫重要性</strong>：⭐⭐⭐<ul><li><strong><code>zh-CN</code></strong>: 这是首选语言。<code>zh</code>代表中文，<code>-CN</code>是子标签，代表中国大陆地区使用的中文（简体中文）。</li><li><strong><code>zh;q=0.9</code></strong>: 这是次选语言。<code>zh</code>代表所有中文变体（如简体或繁体），如果没有 <code>zh-CN</code>，也可以用其他中文版本。<code>q=0.9</code>表示优先级权重是 0.9（范围 0-1，1 是最高）。</li><li><strong><code>en;q=0.8</code></strong>: 这是第三选择。<code>en</code>代表英语，优先级权重是 0.8。</li></ul></li></ul><p><strong>5.Accept-Encoding（可接受的编码）</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Encoding: gzip, deflate, br</span><br></pre></td></tr></table></div></figure><ul><li><strong>作用</strong>：告诉服务器客户端支持的压缩格式</li><li><strong>说明</strong>：服务器可能会返回压缩后的内容，需要解压</li></ul><ol start="6"><li><strong>连接管理头</strong></li></ol><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></div></figure><ul><li><strong>作用</strong>：控制连接是否保持活跃</li><li><strong>常见值</strong>：<ul><li><code>keep-alive</code>- 保持连接</li><li><code>close</code>- 关闭连接</li></ul></li></ul><p><strong>7.缓存相关头If-Modified-Since</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If-Modified-Since: Wed, 18 Sep 2025 01:00:00 GMT</span><br></pre></td></tr></table></div></figure><ul><li><strong>作用</strong>：如果资源在此时间后没有修改，返回304状态码</li></ul><p><strong>8. 认证和安全头</strong>Authorization（认证）</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer eyJhbGciOiJSUzI1NiJ9...</span><br></pre></td></tr></table></div></figure><ul><li><strong>作用</strong>：包含认证凭证</li><li><strong>常见类型</strong>：<ul><li><code>Basic</code>- 基本认证</li><li><code>Bearer</code>- Token认证</li><li><code>Digest</code>- 摘要认证</li></ul></li></ul><p><strong>9.Cookie</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: session_id=abc123; user_token=xyz456</span><br></pre></td></tr></table></div></figure><ul><li><strong>作用</strong>：向服务器发送之前存储的Cookie</li><li><strong>爬虫重要性</strong>：⭐⭐⭐⭐⭐</li><li><strong>格式</strong>：<code>name=value</code>对，用分号分隔</li></ul><p><strong>10. 来源和引用头</strong>Referer（引用来源）</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: https://cgyy.nenu.edu.cn/booking</span><br></pre></td></tr></table></div></figure><ul><li><strong>作用</strong>：告诉服务器当前请求是从哪个页面链接过来的</li><li><strong>爬虫重要性</strong>：⭐⭐⭐⭐</li><li><strong>注意</strong>：有些网站会检查Referer来防止盗链</li></ul>        <h4 id="Origin（来源）"   >          <a href="#Origin（来源）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Origin（来源）" class="headerlink" title="Origin（来源）"></a>Origin（来源）</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Origin: https://cgyy.nenu.edu.cn</span><br></pre></td></tr></table></div></figure><ul><li><strong>作用</strong>：表明请求的来源，用于CORS（跨域资源共享）</li></ul><p>这是一个爬虫常用请求头举例</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;cgyy.nenu.edu.cn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;acw_tc=ac11000117581585555872261e488f4d176bbf7b6670727206b5636e12a130&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://cgyy.nenu.edu.cn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;eyJhbGciOiJSUzI1NiJ9...&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://cgyy.nenu.edu.cn/&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>除了这一种方法，还可以使用Session对象</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">session = requests.Session()</span><br><span class="line">session.headers.update(&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">response = session.get(<span class="string">&#x27;https://example.com&#x27;</span>)</span><br></pre></td></tr></table></div></figure><p>后续我会对这两种的使用进行扩展说明（其实是我觉得我现在水平还不够）</p>        <h3 id="7-如何获取查看请求头？"   >          <a href="#7-如何获取查看请求头？" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-如何获取查看请求头？" class="headerlink" title="7.如何获取查看请求头？"></a>7.如何获取查看请求头？</h3>      <p><strong>浏览器开发者工具查看</strong></p><ol><li>按F12打开开发者工具</li><li>切换到Network（网络）标签</li><li>刷新页面或触发请求</li><li>点击具体请求，查看Headers标签</li></ol><p><strong>Python中查看响应头</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://httpbin.org/headers&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请求头:&quot;</span>, response.request.headers)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;响应头:&quot;</span>, response.headers)</span><br></pre></td></tr></table></div></figure><p>注意！网站通常会检测以下头信息来识别爬虫：</p><ol><li><strong>User-Agent</strong>：非浏览器或默认Python UA</li><li><strong>Accept</strong>、<strong>Accept-Language</strong>：缺失或不合理</li><li><strong>Referer</strong>：缺失或不符合正常浏览流程</li><li><strong>Cookie</strong>：缺失或异常</li><li><strong>其他头字段</strong>：如<code>Sec-</code>开头的安全头</li></ol>        <h3 id="8-HTTP状态码"   >          <a href="#8-HTTP状态码" class="heading-link"><i class="fas fa-link"></i></a><a href="#8-HTTP状态码" class="headerlink" title="8.HTTP状态码"></a>8.HTTP状态码</h3>      <p>1开头的状态码（信息类）：表示请求正在处理</p><p>2开头的状态码（成功）：请求正常处理</p><p>3开头的状态码（重定向）：需要后续操作才能完成请求</p><p>4开头的状态码（客户端错误）：请求包含语法错误或无法完成</p><p>5开头的状态码（服务器错误）：服务器处理请求过程中发生错误了</p><p><strong>常见状态码</strong></p><div class="table-container"><table><thead><tr><th>200</th><th>请求成功</th></tr></thead><tbody><tr><td>301</td><td>资源被永久移动到新地址</td></tr><tr><td>400</td><td>客户端不能被服务器理解</td></tr><tr><td>401</td><td>客户未经授权</td></tr><tr><td>403</td><td>服务器拒绝提供服务</td></tr><tr><td>404</td><td>请求资源不存在</td></tr><tr><td>500</td><td>服务器发生不可预期的错误</td></tr><tr><td>503</td><td>服务器不能处理客户端请求</td></tr></tbody></table></div><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&quot;URL&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> response.ok:</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请求失败&quot;</span>)</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> pythob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站食用方法（推荐阅读！）</title>
      <link href="/2025/09/08/%E7%BD%91%E7%AB%99%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2025/09/08/%E7%BD%91%E7%AB%99%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[        <h3 id="关于为什么写这个网站"   >          <a href="#关于为什么写这个网站" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于为什么写这个网站" class="headerlink" title="关于为什么写这个网站"></a>关于为什么写这个网站</h3>      <p>部署一个自己的网站实在不是一件简单的事，但也实在是一个很酷的事。</p><p>互联网，千亿万亿的连接好像一张星系图。倘若有自己的一个网站，那么在万千星辰中，竟然有一颗是独独属于你的。</p><p><img src="/images/star.jpg" alt="star"></p><p>有些旅人也许会因为一些机缘巧合落到这颗星球上，它的一切，或荒芜，或苍翠。或单调，或繁杂。都被放在你眼前，等待着探索。它会有哪些隐秘的角落，有哪些惊艳的景色。时光在它身上留下了怎样的痕迹……</p><p><strong>这应该，也是我学计算机的初心之一吧</strong></p><p>我很少当面表达自己，我喜欢书信，文字，这些能让我慢慢思考如何表达，给我独自剖开内心的安全感。有些话总不好宣之于口，听起来也许轻浮，也许沉重。但纸墨好似有某种魔力。</p><p><strong>纸那样轻，却能承起太多深重的感情。墨那样轻，却足以将情感诉说的深沉。</strong></p><p>个人博客对我来说也是如此，就像你打开之后会看到的那一句话</p><p><strong>“欢迎来到我的精神世界”</strong>。</p><p>在这里我变成了造物主，所有的一切都是我敲下的代码创造的。朋友，我不知道你是否能理解这种美妙，但我想人们对于“唯一”，“专属”这类词总是情有独钟的。这是独属于我的天地。</p><p>人们都说互联网时代，信息爆炸，再有热度的事也会一晃而过。科技发展的洪流好像要把人吞没。</p><p>但是我也庆幸，因为它的记忆是永存的。它不像人脑，总是会优先记住当下的，重要的。对于存储器而言，<strong>你的每一段记忆都是平等的</strong>，**它们不分轻重缓急。**它们一直会在。</p><p>是啊，本该如此，我的记忆为何要不平等呢，我为何要遗忘一些事呢？</p><p><strong>这就是第二个原因，记录。</strong></p><p>将来的我会变成什么样，会有怎样的未来，拥有怎样的生活？我给不了答案，也无需一个答案。</p><p>我只需走好我现在要迈出的这一步，也带着我曾经走的每一步路的信念就好。</p><p>我有很多想记录的事，这大概是源于我有很多珍惜的事。我的朋友，我的学习，我的文字，乃至我的痛苦与释然。</p><p>当然俗气一点的说，也可以勉励自己热爱生活，充实的度过每一天。网站会无声的告诉你“读书笔记几天没有更新啦”。</p><p>每次更新网站的时候，我内心都有一个声音</p><p><strong>你看，你一直在往前走</strong></p><p><img src="/images/20200228102720_wcnmi.jpg" alt="可爱表情包 - 堆糖，美图壁纸兴趣社区"></p>        <h3 id="你能在这个网站看到什么"   >          <a href="#你能在这个网站看到什么" class="heading-link"><i class="fas fa-link"></i></a><a href="#你能在这个网站看到什么" class="headerlink" title="你能在这个网站看到什么"></a>你能在这个网站看到什么</h3>      <p>标题栏的<strong>文章</strong>板块，你可以看到我写的所有东西。有些杂乱。</p><p>这有我的<strong>学习笔记</strong>，<strong>乱七八糟的感想</strong>，<strong>诗歌</strong>，<strong>作文</strong>等等等。</p><p>学习方面，我最近主要更新的应该是<strong>python</strong>，<strong>爬虫</strong>，<strong>数据库</strong>，<strong>算法</strong>类。后面也许会更新<strong>机器学习</strong>（待研究的有兴趣的领域）。</p><p>读书方面，后续也许有我分享的<strong>书单</strong>（我会附上电子文件），喜欢的<strong>句子</strong>，<strong>诗文</strong>。</p><p>创作方面应该就是我的<strong>读后感</strong>，<strong>诗歌</strong>，<strong>文章</strong>。</p><p>你可以在<strong>分类</strong>板块选择你感兴趣的分类探索。（也许你会在某些隐秘的角落发现精神共鸣，那么恭喜你多了一份触动，也恭喜我在看不见的地方打动了一个人某一刻。）</p><p>然后就是<strong>友链</strong>板块。这像一个传送阵，可以传送到不同星球。是的，我的有些朋友们也有他们自己的博客。如果你也有的话，可以在<strong>评论区</strong>留下你的网站，或者发送到邮箱<span class="exturl"><a class="exturl__link"   href="mailto:&#50;&#57;&#x38;&#x35;&#x37;&#50;&#53;&#56;&#x36;&#x36;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;" >2985725866@qq.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>最后就是相册啦，这个板块没有想好。可能后面放点照片吧。也许会设置加密，如果你回答对问题就可以看！</p><p><img src="/images/OIP-C.webp" alt="盘点女生用的可爱的表情包 - 抖音"></p>]]></content>
      
      
      <categories>
          
          <category> 创作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 写作 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python前言</title>
      <link href="/2025/09/08/py%E5%89%8D%E8%A8%80/"/>
      <url>/2025/09/08/py%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[        <h3 id="1-什么是BIF？"   >          <a href="#1-什么是BIF？" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-什么是BIF？" class="headerlink" title="1.什么是BIF？"></a>1.<strong>什么是BIF？</strong></h3>      <p>BIF 就是 Built-in Functions，内置函数</p>        <h3 id="2-python中的变量名不能以数字开头"   >          <a href="#2-python中的变量名不能以数字开头" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-python中的变量名不能以数字开头" class="headerlink" title="2.python中的变量名不能以数字开头"></a>2.python中的变量名不能以数字开头</h3>              <h3 id="3"   >          <a href="#3" class="heading-link"><i class="fas fa-link"></i></a><a href="#3" class="headerlink" title="3."></a>3.</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">a=b</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></div></figure><p>会输出1，没有单引号，因为它用print打印</p>        <h3 id="4-除了使用反斜杠（-）进行字符转义，还有什么方法可以打印：Let’s-go-这个字符串？"   >          <a href="#4-除了使用反斜杠（-）进行字符转义，还有什么方法可以打印：Let’s-go-这个字符串？" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-除了使用反斜杠（-）进行字符转义，还有什么方法可以打印：Let’s-go-这个字符串？" class="headerlink" title="4. 除了使用反斜杠（\）进行字符转义，还有什么方法可以打印：Let’s go! 这个字符串？"></a><strong>4. 除了使用反斜杠（\）进行字符转义，还有什么方法可以打印：Let’s go! 这个字符串？</strong></h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s go!&quot;</span>)  *<span class="comment"># 双引号内单引号无需转义*</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;Let&#x27;s go!&#x27;&#x27;&#x27;</span>)  *<span class="comment"># 三单引号* print(&quot;&quot;&quot;Let&#x27;s go!&quot;&quot;&quot;)  *# 三双引号*</span></span><br></pre></td></tr></table></div></figure>        <h3 id="5-如果非要在原始字符串结尾输入反斜杠，可以如何灵活处理？"   >          <a href="#5-如果非要在原始字符串结尾输入反斜杠，可以如何灵活处理？" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-如果非要在原始字符串结尾输入反斜杠，可以如何灵活处理？" class="headerlink" title="5. 如果非要在原始字符串结尾输入反斜杠，可以如何灵活处理？"></a><strong>5. 如果非要在原始字符串结尾输入反斜杠，可以如何灵活处理？</strong></h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*<span class="comment"># 在原始字符串外手动转义* </span></span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;C:\Users\Documents&#x27;</span><span class="string">&#x27;\\&#x27;</span>  *<span class="comment"># 注意两字符串间无空格* </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(path)  *<span class="comment"># 输出: C:\Users\Documents\</span></span><br><span class="line"></span><br><span class="line">*<span class="comment"># 将结尾反斜杠单独用普通字符串拼接* </span></span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;C:\Users\Documents&#x27;</span> + <span class="string">&#x27;\\&#x27;</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">print</span>(path)  <span class="comment"># 输出: C:\Users\Documents\</span></span><br></pre></td></tr></table></div></figure>        <h3 id="6-如果输出格式复杂的空行多空格多的文本怎么办？"   >          <a href="#6-如果输出格式复杂的空行多空格多的文本怎么办？" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-如果输出格式复杂的空行多空格多的文本怎么办？" class="headerlink" title="6.如果输出格式复杂的空行多空格多的文本怎么办？"></a>6.如果输出格式复杂的空行多空格多的文本怎么办？</h3>              <h4 id="三重引号字符串‘’‘-xxx-‘’’"   >          <a href="#三重引号字符串‘’‘-xxx-‘’’" class="heading-link"><i class="fas fa-link"></i></a><a href="#三重引号字符串‘’‘-xxx-‘’’" class="headerlink" title="三重引号字符串‘’‘  xxx ‘’’"></a>三重引号字符串‘’‘  xxx ‘’’</h4>      <p>如果希望得到一个跨越多行的字符串，我们就可以使用三重引号字符串，这里的三重引号可以是三个单引号也可以是三个双引号。</p><p>&gt;&gt;&gt; str &#x3D; “””轻轻的我走了，</p><p>正如我轻轻的来；</p><p>我轻轻的招手，</p><p>作别西天的云彩。…</p><p>“””</p>        <h3 id="7-Python3-中，一行可以书写多个语句吗？"   >          <a href="#7-Python3-中，一行可以书写多个语句吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-Python3-中，一行可以书写多个语句吗？" class="headerlink" title="7. Python3 中，一行可以书写多个语句吗？"></a>7. Python3 中，一行可以书写多个语句吗？</h3>      <p>可以，语句之间用分号隔开即可，不妨试试：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;I love fishc&#x27;);print(&#x27;very much!&#x27;)</span><br></pre></td></tr></table></div></figure>        <h3 id="8-我们人类思维是习惯于“四舍五入”法，你有什么办法使得-int-按照“四舍五入”的方式取整吗？"   >          <a href="#8-我们人类思维是习惯于“四舍五入”法，你有什么办法使得-int-按照“四舍五入”的方式取整吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#8-我们人类思维是习惯于“四舍五入”法，你有什么办法使得-int-按照“四舍五入”的方式取整吗？" class="headerlink" title="8.我们人类思维是习惯于“四舍五入”法，你有什么办法使得 int() 按照“四舍五入”的方式取整吗？"></a>8.我们人类思维是习惯于“四舍五入”法，你有什么办法使得 int() 按照“四舍五入”的方式取整吗？</h3>      <p>5.4 “四舍五入”结果为：5，int(5.4+0.5) &#x3D;&#x3D; 5<br>5.6 “四舍五入”结果为：6，int(5.6+0.5) &#x3D;&#x3D; 6</p>        <h3 id="9-取得一个变量的类型，视频中介绍可以使用-type-和-isinstance-，你更倾向于使用哪个？"   >          <a href="#9-取得一个变量的类型，视频中介绍可以使用-type-和-isinstance-，你更倾向于使用哪个？" class="heading-link"><i class="fas fa-link"></i></a><a href="#9-取得一个变量的类型，视频中介绍可以使用-type-和-isinstance-，你更倾向于使用哪个？" class="headerlink" title="9. 取得一个变量的类型，视频中介绍可以使用 type() 和 isinstance()，你更倾向于使用哪个？"></a>9. 取得一个变量的类型，视频中介绍可以使用 type() 和 isinstance()，你更倾向于使用哪个？</h3>      <p>建议使用 isinstance()，因为它的返回结果比较直接，另外 type() 其实并没有你想象的那么简单，我们后边会讲到。</p>        <h5 id="🤔-为什么-isinstance-更胜一筹？"   >          <a href="#🤔-为什么-isinstance-更胜一筹？" class="heading-link"><i class="fas fa-link"></i></a><a href="#🤔-为什么-isinstance-更胜一筹？" class="headerlink" title="🤔 为什么 isinstance()更胜一筹？"></a>🤔 <strong>为什么 <code>isinstance()</code>更胜一筹？</strong></h5>              <h5 id="1-继承链检查能力（核心优势）"   >          <a href="#1-继承链检查能力（核心优势）" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-继承链检查能力（核心优势）" class="headerlink" title="1. 继承链检查能力（核心优势）"></a>1. <strong>继承链检查能力</strong>（核心优势）</h5>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Animal:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Dog(Animal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">dog = Dog()</span><br><span class="line"></span><br><span class="line"># type() 的局限性</span><br><span class="line">print(type(dog) == Animal)  # False - 只检查精确类型</span><br><span class="line"></span><br><span class="line"># isinstance() 的智能检查</span><br><span class="line">print(isinstance(dog, Animal))  # True - 识别继承关系</span><br><span class="line">print(isinstance(dog, (Animal, Dog)))  # True - 支持多类型检查</span><br></pre></td></tr></table></div></figure>        <h5 id="2-多类型联合检查"   >          <a href="#2-多类型联合检查" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-多类型联合检查" class="headerlink" title="2. 多类型联合检查"></a>2. <strong>多类型联合检查</strong></h5>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def process_input(value):</span><br><span class="line">    if isinstance(value, (int, float, str)):</span><br><span class="line">        # 同时检查多种类型</span><br><span class="line">        return f&quot;Processing: &#123;value&#125;&quot;</span><br><span class="line">    raise TypeError(&quot;Invalid type&quot;)</span><br></pre></td></tr></table></div></figure>        <h3 id="10-Python-的-floor-除法现在使用-“-”-实现，那-3-0-2-0-您目测会显示什么内容呢？"   >          <a href="#10-Python-的-floor-除法现在使用-“-”-实现，那-3-0-2-0-您目测会显示什么内容呢？" class="heading-link"><i class="fas fa-link"></i></a><a href="#10-Python-的-floor-除法现在使用-“-”-实现，那-3-0-2-0-您目测会显示什么内容呢？" class="headerlink" title="10. Python 的 floor 除法现在使用 “&#x2F;&#x2F;” 实现，那 3.0 &#x2F;&#x2F; 2.0 您目测会显示什么内容呢？"></a>10. Python 的 floor 除法现在使用 “&#x2F;&#x2F;” 实现，那 3.0 &#x2F;&#x2F; 2.0 您目测会显示什么内容呢？</h3>      <p>Python 这里会义无反顾地执行 floor 除法原则，答案是：1.0</p>        <h3 id="11-请用最快速度说出答案：not-1-or-0-and-1-or-3-and-4-or-5-and-6-or-7-and-8-and-9"   >          <a href="#11-请用最快速度说出答案：not-1-or-0-and-1-or-3-and-4-or-5-and-6-or-7-and-8-and-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#11-请用最快速度说出答案：not-1-or-0-and-1-or-3-and-4-or-5-and-6-or-7-and-8-and-9" class="headerlink" title="11.请用最快速度说出答案：not 1 or 0 and 1 or 3 and 4 or 5 and 6 or 7 and 8 and 9"></a>11.请用最快速度说出答案：not 1 or 0 and 1 or 3 and 4 or 5 and 6 or 7 and 8 and 9</h3>      <p>答案是：4</p><p>not or and 的优先级是不同的：not &gt; and &gt; or</p><p>我们按照优先级给它们加上括号：(not 1) or (0 and 1) or (3 and 4) or (5 and 6) or (7 and 8 and 9)<br>&#x3D;&#x3D; 0 or 0 or 4 or 6 or 9<br>&#x3D;&#x3D; 4</p><p>为什么是 4？提到的“短路逻辑”：3 and 4 &#x3D;&#x3D; 4，而 3 or 4 &#x3D;&#x3D; 3。<br>所以答案是：4</p>        <h3 id="12-假设有-x-1，y-2，z-3，请问如何快速将三个变量的值互相交换？"   >          <a href="#12-假设有-x-1，y-2，z-3，请问如何快速将三个变量的值互相交换？" class="heading-link"><i class="fas fa-link"></i></a><a href="#12-假设有-x-1，y-2，z-3，请问如何快速将三个变量的值互相交换？" class="headerlink" title="12. 假设有 x &#x3D; 1，y &#x3D; 2，z &#x3D; 3，请问如何快速将三个变量的值互相交换？"></a>12. 假设有 x &#x3D; 1，y &#x3D; 2，z &#x3D; 3，请问如何快速将三个变量的值互相交换？</h3>      <p>x, y, z &#x3D; z, y, x</p>        <h3 id="13-猜猜-x-y-and-x-or-y-0-实现什么样的功能"   >          <a href="#13-猜猜-x-y-and-x-or-y-0-实现什么样的功能" class="heading-link"><i class="fas fa-link"></i></a><a href="#13-猜猜-x-y-and-x-or-y-0-实现什么样的功能" class="headerlink" title="13. 猜猜 (x &lt; y and [x] or [y])[0] 实现什么样的功能"></a>13. 猜猜 (x &lt; y and [x] or [y])[0] 实现什么样的功能</h3>      <p>即：<strong>返回 <code>x</code>和 <code>y</code>中的较小值</strong>（类似 <code>min(x, y)</code>的基础版）</p><hr>        <h3 id="🔍-分步拆解"   >          <a href="#🔍-分步拆解" class="heading-link"><i class="fas fa-link"></i></a><a href="#🔍-分步拆解" class="headerlink" title="🔍 分步拆解"></a>🔍 <strong>分步拆解</strong></h3>      <p>假设 <code>x = 3</code>, <code>y = 5</code>：</p><ol><li><ol><li></li></ol><p><strong>第一步：<code>x &lt; y</code>判断</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 &lt; 5 → True</span><br></pre></td></tr></table></div></figure></li><li><ol start="2"><li></li></ol><p><strong>第二步：<code>and [x]</code></strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True and [3] → [3]  # and操作返回最后一个真值</span><br></pre></td></tr></table></div></figure></li><li><ol start="3"><li></li></ol><p><strong>第三步：<code>or [y]</code></strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[3] or [5] → [3]  # or操作在左值为真时短路返回</span><br></pre></td></tr></table></div></figure></li><li><ol start="4"><li></li></ol><p><strong>第四步：取列表首元素</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[3][0] → 3</span><br></pre></td></tr></table></div></figure></li></ol>        <h3 id="14-请将以下代码修改为三元操作符实现："   >          <a href="#14-请将以下代码修改为三元操作符实现：" class="heading-link"><i class="fas fa-link"></i></a><a href="#14-请将以下代码修改为三元操作符实现：" class="headerlink" title="14.请将以下代码修改为三元操作符实现："></a>14.请将以下代码修改为三元操作符实现：</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> x &lt; y:</span><br><span class="line">    small = x</span><br><span class="line">    <span class="keyword">if</span> z &lt; small:</span><br><span class="line">        small = z</span><br><span class="line"><span class="keyword">elif</span> y &lt; z:</span><br><span class="line">    small = y</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    small = z</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">small = x <span class="keyword">if</span> (x &lt; y <span class="keyword">and</span> x &lt; z) <span class="keyword">else</span> (y <span class="keyword">if</span> y &lt; z <span class="keyword">else</span> z)</span><br></pre></td></tr></table></div></figure>        <h3 id="15-断言（assert）"   >          <a href="#15-断言（assert）" class="heading-link"><i class="fas fa-link"></i></a><a href="#15-断言（assert）" class="headerlink" title="15.断言（assert）"></a>15.断言（assert）</h3>      <p>assert这个关键字我们称之为“断言”，当这个关键字后边的条件为假时，程序自动崩溃并抛出AssertionError的异常。当这个关键字后边的条件为真时，程序无影响。</p><p>举个例子：</p><blockquote><blockquote><blockquote><p>assert 3 &gt; 4</p></blockquote></blockquote></blockquote><p>一般来说我们可以用Ta在程序中置入检查点，当需要确保程序中的某个条件一定为真才能让程序正常工作的话，assert关键字就非常有用了。</p>        <h3 id="16-下面的循环会打印多少次”I-Love-you”？"   >          <a href="#16-下面的循环会打印多少次”I-Love-you”？" class="heading-link"><i class="fas fa-link"></i></a><a href="#16-下面的循环会打印多少次”I-Love-you”？" class="headerlink" title="16. 下面的循环会打印多少次”I Love you”？"></a>16. 下面的循环会打印多少次”I Love you”？</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I Love you&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>5 次，因为从 0 开始，到 10 结束，步进为 2。（0 2 4 6 8）</p>]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
